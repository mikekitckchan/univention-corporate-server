#!/usr/share/ucs-test/runner python
# #!/usr/share/ucs-test/runner /usr/bin/py.test -s
## desc: Test to check custom mappings for the AD-Connector
## bugs: [49981]
## roles:
##  - domaincontroller_master
## exposure: dangerous
## packages:
##  - univention-ad-connector


from univention.testing.strings import random_username, random_string
from univention.testing.connector_common import (NormalUser, create_udm_user)
from adconnector import (ADConnection, restart_adconnector, wait_for_sync)

import univention.testing.udm as udm_test
import univention.testing.ucr as ucr_test

import unittest
import os
import sys

sys.path.append('$TESTLIBPATH')

class TestADCustomMappings(unittest.TestCase):
    def setUp(self):
        self.attribute = "univentionFreeAttribute20"
        self.target_attribute = "company"

        self.mapping_file = "/etc/univention/connector/ad/localmapping.py"
        self.mapping_file_dir = os.path.dirname(self.mapping_file)

        TEST_MAPPING = \
            "import univention.connector\n" \
            "def mapping_hook(ad_mapping):\n" \
            "    ad_mapping['user'].post_attributes['organisation'] =\\\n" \
            "        univention.connector.attribute(\n" \
            "            ucs_attribute='{attribute}',\n" \
            "            ldap_attribute='{attribute}',\n" \
            "            con_attribute='{target_attribute}'\n" \
            "        )\n" \
            "    return ad_mapping\n".format(
                attribute=self.attribute,
                target_attribute=self.target_attribute
                )

        sys.stderr.write("Using as test-mapping:\n%s\n" % TEST_MAPPING)

        try:
            os.mkdir(self.mapping_file_dir)
        except OSError:
            sys.stderr.write("Directory already exists: %s\n" % self.mapping_file_dir)

        with open(self.mapping_file, 'w') as f:
            f.write(TEST_MAPPING)

        # activate mapping by restarting the ad-connector...
        restart_adconnector()

        with ucr_test.UCSTestConfigRegistry() as ucr:
            ucr.load()
            self.ldap_base = ucr['ldap/base']

        self.udm = udm_test.UCSTestUDM()
        self.adc = ADConnection()

    def tearDown(self):
        try:
            self.udm.cleanup()
            os.remove(self.mapping_file)
            # deactivate mapping by restarting the ad-connector after file has
            # gone...
            restart_adconnector()

        except OSError:
            sys.stderr.write("Surprising, that there is nothing to remove from this test.\n")


    def create_extended_attribute(self, udm, ldapMapping, module, defaultValue="defaultValue-TestFailed"):

        """
        Creates an extended attribute with a default value under module (e.g.
        under 'user/user')
        """

        sys.stderr.write("Creating extended attribute '%s' under '%s' with default value '%s'\n" % (
            ldapMapping, self.ldap_base, defaultValue))

        udm.create_object(
            'settings/extended_attribute',
            position='cn=custom attributes,cn=univention,%s' % self.ldap_base,
            **dict(
                name=ldapMapping,
                ldapMapping=ldapMapping,                 # mandatory
                CLIName=ldapMapping,                     # mandatory
                objectClass='univentionFreeAttributes',  # mandatory
                shortDescription=("test value: %s" % defaultValue),
                valueRequired='1',
                module=[module],
                default=defaultValue
            )
        )

    def test_ldap_to_ad_with_mapping(self):

        """
        this test will create a user and set its extended attribute to a random
        value. It will then check if the random value appears in the 'company'
        field of the user in the active directory, because that is hard coded
        in the custom mapping.
        """

        test_string = random_string()
        self.create_extended_attribute(self.udm, self.attribute, "users/user")

        # create a random user
        udm_user = NormalUser(selection=("username", "lastname"))
        udm_user.basic["password"] = "univention"
        udm_user.basic["description"] = ("test value: '%s'" % test_string) # useful as debugging hint

        # the 'o' field in ldap is usually mapped to company in AD's
        # but we have hardcoded in our mapping, that the company should
        # be overwritten by the value from the extended attribute
        udm_user.basic["o"] = "test failed"

        # write test_string into extended attribute...
        udm_user.basic[self.attribute] = test_string

        (udm_user_dn, ad_user_dn) = create_udm_user(self.udm, self.adc, udm_user, wait_for_sync)

        sys.stderr.write("Summary of users to be synchronized:\n\tudm_user_dn:\t%s,\n\ts4_user_dn:\t%s\n" % (
            udm_user_dn, ad_user_dn))

        # verify that the user exists on the 'ad-side'...
        self.assertTrue(self.adc.exists(ad_user_dn))

        # check the value from the mapping
        self.assertEqual(self.adc.get_attribute(ad_user_dn, self.target_attribute), [test_string])


if __name__ == "__main__":
    unittest.main()

# vim: filetype=python expandtab tabstop=4 shiftwidth=4 softtabstop=4
