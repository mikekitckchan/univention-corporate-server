<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%entities;
]>
<book lang="en" id='app-provider-4.4'>
<bookinfo>
  <title>Univention App Center for App Providers</title>
</bookinfo>

<chapter id="introduction">
    <title>Introduction</title>

    <para>
        This document is for app providers who want to place their product
        clearly visible for a broad, professional and growing user group. It
        covers the steps on how to make the product available as an app for
        Univention App Center.
    </para>

    <section id="introduction:start">
	    <title>What is Univention App Center?</title>
        <para>
            Univention App Center is an ecosystem similar to the app stores
            known from mobile platforms like Apple or Google. It provides an
            infrastructure to build, deploy and run enterprise applications on
            &ucsUCS; (UCS). The App Center uses well-known
            technologies like <ulink url="https://www.docker.com/">Docker</ulink>.
        </para>
    </section>

    <section id="infrastructure">
        <title>App Center infrastructure</title>

        <para>
            The ecosystem consists of the following components:
            <itemizedlist>
                <listitem>
                    <simpara>
                        <emphasis>The App</emphasis> is the software plus the
                        collection of metadata like configuration, text
                        description, logo, screenshots and more for the
                        presentation.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Center Repository</emphasis> is a
                        central server infrastructure managed by Univention
                        that stores the files and data for the app. It is the
                        installation source for the app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Center Module on UCS</emphasis> is
                        part of the web-based management system on UCS. It is the
                        place where UCS administrators install, update and
                        uninstall apps in their UCS environment.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Catalog</emphasis> presents the app
                        portfolio on the <ulink
                            url="https://www.univention.com/products/univention-app-center/app-catalog/">
                            Univention website</ulink>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Provider Portal</emphasis> is the
                        self-service portal for app providers where they can
                        create and maintain their app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The Test App Center</emphasis> is the
                        &quot;staging area&quot; for app providers to develop
                        and test their apps.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>Univention Corporate Server (UCS)</emphasis>
                        is the target platform for the app. UCS is technically
                        a derivative of Debian GNU/Linux.
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            For building an app the app developer works with UCS, the app, the
            App Provider Portal and the Test App Center.
        </para>
    </section>
</chapter>

<chapter id="get-started">
    <title>Get Started</title>

    <para>
        This chapter describes the requirements and the steps to create an app
        for Univention App Center. After reading this chapter an app provider
        will be able to create their own app and start with a development and test cycle
        using the Test App Center.
    </para>

    <section id="app-provider-needs">
        <title>What does the app provider need?</title>

        <section id="app-provider-needs:docker-image">
            <title>Software in a Docker image</title>
            <para>
                The software needs to be provided as a <ulink
                    url="https://docs.docker.com/">Docker image</ulink>. This
                is the easiest way to deploy software in Univention App Center.
                It is also recommended to publish the Docker container to
                <ulink url="https://hub.docker.com/">Docker hub</ulink>. This
                makes referencing the image later much easier and simplifies
                the development and test cycle during development.
            </para>
            <para>
                If public access to the image is not wanted, it can be made
                private. For use on a UCS test machine during app development,
                the <userinput>docker login</userinput> needs to be used on the
                command-line to grant your machine access to the private image.
                For the release of the app, the Univention team needs to have
                access to the image. Please then grant access to the Docker Hub
                user <userinput>univention</userinput>. The image then has to
                be copied manually by the App Center team to the Univention
                Docker registry, which cannot be browsed.
                It needs credentials to be accessed. The Docker image should be
                considered public by the time the app is published in
                Univention App Center.
            </para>
            <para>
                The image must have a version tag to distinguish different
                software versions. It later allows updates for the apps.
            </para>
        </section>

        <section id="app-provider-needs:portal-account">
            <title>Account for App Provider Portal</title>

            <para>
                The App Provider Portal is the app developer's place for self
                service for all the settings around the app.
            </para>

           <orderedlist>
               <listitem>
                   <simpara>
                       To start building the app, an account for the App
                       Provider Portal is needed.  Please <ulink
                           url="https://www.univention.com/products/univention-app-center/for-solution-providers/">
                           request a personal account</ulink> on the
                       Univention website and provide some context about the
                       intended app.
                   </simpara>
               </listitem>
               <listitem>
                   <simpara>
                       An email with username and instructions on how to set a
                       password is sent.
                   </simpara>
               </listitem>
               <listitem>
                   <simpara>
                       Afterwards the login can be performed at the <ulink
                           url="https://provider-portal.software-univention.de/univention-management-console/">App
                           Provider Portal</ulink>.
                   </simpara>
               </listitem>
               <listitem>
                   <simpara>
                       After the login, the <guimenu>Apps</guimenu> module needs to be opened to work on the app.
                   </simpara>
               </listitem>
           </orderedlist>
           <para>
             <figure id="create-app-with-docker:portal-overview">
                 <title>App Provider Portal overview with "Apps" module selected</title>
                 <graphic scalefit="1" width="100%" fileref="illustrations44/app_portal_overview.png"/>
             </figure>
          </para>
       </section>
       <section id="app-provider-needs:help">
           <title>Where to get help?</title>
           <para>
               App providers that need technical help during their development
               process are invited to open a topic in <ulink
                   url="https://help.univention.com/c/apps/dev">Univention
                   Forum</ulink>. The dedicated section <guimenu>App
                   Development</guimenu> is for all questions around app
               development, debugging and the like.
           </para>
       </section>
    </section>

    <section id="create-app-with-docker">
        <title>Create an app with a Docker image</title>

        <para>
            This section describes how to create the app in the App Provider
            Portal and use a Docker image. It focuses on a single container
            setup. For a setup with multiple containers with Docker Compose
            please see <xref linkend="create-app-with-docker:compose" />.
        </para>

        <para>
            <figure id="create-app-with-docker:create-app">
                <title>Add a new App</title>
                <graphic scalefit="1" width="28%" fileref="illustrations44/app_portal_new_app.png"/>
            </figure>
        </para>

        <orderedlist>
            <listitem>
                <simpara>
                    In the App Provider Portal select the
                    <guimenu>Apps</guimenu> module in the
                    <guimenu>Favorites</guimenu> or <guimenu>Software</guimenu>
                    section.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    Click on <guimenu>Add new app</guimenu> and provide the following settings.
                </simpara>
                    <itemizedlist>
                    <listitem>
                        <simpara>
                            <emphasis>App ID</emphasis> is like a primary key.
                            Choose it carefully, because it cannot be changed
                            once the app is released to the public.  It should
                            only use small capitals, dashes and numbers.
                            Please do not include version strings in here.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>App name</emphasis> is the name of the
                            app. It is used to display the app on the overview
                            pages. This attribute can be changed any time.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>App version</emphasis> is the version of
                            the app. The App Center distinguishes versions and
                            uses them to handle app updates. Once the app is
                            released, this attribute cannot be changed.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>UCS version</emphasis> is the UCS version
                            the app should start to be available on. Simply
                            start with the latest available UCS version. It can
                            also be started with the oldest maintained UCS
                            version to cover the broadest user base of UCS. See
                            the <ulink
                                url="https://wiki.univention.de/index.php/Maintenance_Cycle_for_UCS">UCS
                                maintenance cycle</ulink> for an overview of
                            the maintained UCS version. In either case it is
                            recommended to specify the supported UCS versions
                            explicitly (see <xref
                                linkend="create-app-with-docker:supported-ucs-version"
                                />.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>Provider / Maintainer</emphasis> refers to the
                            organization that the app belongs to. Please select
                            your organization here or otherwise the app will not
                            show up in the listing.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            Select <emphasis>Docker app</emphasis> or
                            <emphasis>Docker app based on UCS
                                <wordasword>AppBox</wordasword></emphasis> for
                            the recommended Docker based app. This
                            documentation only covers single and multi
                            container apps.
                        </simpara>
                    </listitem>
                    </itemizedlist>
            </listitem>
        </orderedlist>

        <section id="create-app-with-docker:image">
            <title>Docker image</title>

            <orderedlist>
                <listitem>
                    <simpara>
                        In the app go to the tab <guimenu>Configuration</guimenu>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Select the type of Docker app. This chapter discusses
                        the <guimenu>Single container app</guimenu>, therefore
                        please select it.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Enter the name of the image to <guimenu>Docker
                            image</guimenu>. Grab the name of the image from
                        Docker hub for example
                        <literal>univention/ucs-master-amd64:4.2-2</literal>.
                    </simpara>
                </listitem>
            </orderedlist>

            <important>
                <para>
                    Please add the version tag explicitly. The App Center
                    distinguishes different app versions and handles updates
                    accordingly.
                </para>
            </important>
        </section>

        <section id="create-app-with-docker:supported-ucs-version">
            <title>Supported UCS versions</title>
            <para>
                Upon app creation the <option>UCS Version</option> has been
                specified. Please define the supported UCS version explicitly
                on the <guimenu>Version</guimenu> tab in the <guimenu>Supported
                    UCS versions</guimenu> section.
            </para>
            <para>
                Example: The app has been created for <option>UCS
                    Version</option> <userinput>4.3</userinput>. Two
                entries for <guimenu>Supported UCS versions for App</guimenu>
                could be made: <userinput>4.3-4</userinput> and
                <userinput>4.4-0</userinput>. This means that for the
                installation of the app UCS 4.3-4 or UCS 4.4-0 are required.
            </para>
        </section>

        <section id="create-app-with-docker:description">
            <title>Logo and description</title>
            <para>
                On the app's <guimenu>Presentation</guimenu> tab please provide
                the display name and a description in English and German and
                logos for the software. Start with a short and a full
                description. It gives an impression on how it will look like
                during later testing.
            </para>
            <para>
               On the same tab two logos can be uploaded: A default icon that is
               shown on the app tile in the overview. For optimal
               presentation it should be more of a 1:1 ratio. The second can
               be more detailed and can for example include the software name.
               Please provide the logos in SVG format.
           </para>
           <para>
               Those settings can be changed later. For a more
               detailed description of the app presentation and notes on the
               translation, please take a look at <xref
                   linkend="app-presentation" />.
           </para>
        </section>

        <section id="create-app-with-docker:volumes">
            <title>Persistent data with volumes</title>
            <para>
                By default files created inside a container are stored in it,
                but they don't persist when the container is no longer running,
                removed or is exchanged with a newer version. As solution
                Docker offers <ulink
                    url="https://docs.docker.com/storage/volumes/">volumes</ulink>,
                a mechanism for persisting data generated and used by Docker
                containers. A volume is a directory on the Docker host that is
                mounted inside the Docker container.
            </para>
            <para>
                To define volumes for the app, please activate them on the
                <guimenu>Overview</guimenu> tab in the
                <guimenu>Modules</guimenu> section with the option
                <guimenu>Docker app defines volumes</guimenu>. Then go to the
                <guimenu>Volumes</guimenu> tab. Add an entry for each volume
                and define the directory or file path on the host in the first
                field and the destination in the container in the second field.
                Leave the second field empty for the same path.
            </para>
            <para>
                For example:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <guilabel>Host</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            <userinput>/var/lib/app_etc</userinput>
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guilabel>Docker container</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            <userinput>/etc/app</userinput>
                        </simpara>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="create-app-with-docker:web-interface">
            <title>Web interface</title>
            <para>
                Many Docker apps expose a web interface to the outside world,
                e.g. via the port 8080. The App Center on UCS takes care to map
                this web interface from some relative link to this port and adds a
                reverse proxy configuration to the host's webserver
                configuration.
            </para>
            <para>
                On the <guimenu>Web interface</guimenu> tab, enter the relative
                path and which ports should be proxied. For example, to map
                the container's ports 80 and 443 to
                <userinput>/myapp</userinput>, the following settings have to
                be made:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <guilabel>Relative URL to web application</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            <userinput>/myapp</userinput>
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guilabel>HTTP port of web application</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            <userinput>80</userinput>
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guilabel>HTTPS port of web application</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            <userinput>443</userinput>
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guilabel>Supported protocols by the container's web interface</guilabel>
                    </term>
                    <listitem>
                        <simpara>
                            Select <userinput>HTTP and HTTPS</userinput>, if
                            both protocol schemes should be covered.
                        </simpara>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="create-app-with-docker:ports">
            <title>Ports</title>
            <para>
                If the app needs to occupy ports on the host that need to be
                passed along to the container in order to work properly, they can
                be defined in the <guimenu>Ports</guimenu> section
                on the <guimenu>Web interface</guimenu> tab. A list of ports can be
                defined that the Docker host shall exclusively acquire for the
                Docker container (<guimenu>Port to be acquired
                    exclusively</guimenu>). Ports defined here cannot be used
                by other services or other Docker containers on the UCS host. A
                second list can be defined for ports that should be forwarded
                from the host to the Docker container (<guimenu>Host port to be
                    forwarded</guimenu>). Ports defined here will build an
                implicit conflict list against other apps that want to use
                these ports.
            </para>
            <para>
                For example, the solution exposes the API under the dedicated port
                <userinput>5555</userinput>. This port would be predestined to
                be defined here.
            </para>
            <para>
                With the port definition the App Center also takes care to open
                them in the UCS firewall. If additional firewall rules for
                ports are needed, they can be defined in the app join script.
                Please refer to the <ulink
                    url="https://docs.software-univention.de/developer-reference-4.4.html#misc:nacl">Network
                    Packet Filter section in the UCS Development
                    Reference</ulink>.
            </para>
        </section>

        <section id="create-app-with-docker:database">
            <title>Database</title>
            <para>
                Many applications need a relational database management system
                (<wordasword>RDMS</wordasword>) somewhere in the environment to
                function properly. If the app needs such a database the App
                Center takes care of providing one directly to the Docker host.
                Activate <guimenu>Docker app needs database</guimenu> on the
                <guimenu>Overview</guimenu> tab in the
                <guimenu>Modules</guimenu> section and then go to the
                <guimenu>Database</guimenu> tab, where the appropriate settings
                can be made.
            </para>
            <para>
                In the <guimenu>Database</guimenu> section the settings for the
                database are defined. MySQL and PostgreSQL are supported.
                Database user, database name and the path to the password file
                can be specified. Upon installation of the app, the App Center
                installs the defined database on the Docker host, creates a
                database with the defined settings and saves the password in a
                file for later use.
            </para>
            <para>
                In the <guimenu>Database environment variables</guimenu>
                section, the mapping of the database settings to the
                environment variables in the container are defined. For
                example, if the container expects the database hostname in
                <envar>DATABASE_HOST</envar>, it has to be entered into the
                field <guimenu>Variable name for the database host</guimenu>.
                There are also fields for the database port, user, password,
                database name and the password file.
            </para>
        </section>

        <section id="create-app-with-docker:environment">
            <title>Environment</title>
            <para>
                Docker images usually receive environment variables when the
                container is started. The App Center supports to pass static
                configuration options to the container. Variables parameterized
                by &ucsUCRV;s are also supported. An environment file can look
                like the following example:
                <programlisting>
LDAP_SERVER=@%@ldap/server@%@
FQDN=@%@hostname@%@.@%@domainname@%@
HOME=/var/lib/univention-appcenter/apps/myapp/data/myapp_home
                </programlisting>
            </para>
            <para>
                The content of the environment file can be entered in the App
                Provider portal on the <guimenu>Configuration</guimenu> tab in
                the field for <guimenu>Environment file for Docker container
                    creation</guimenu>.
            </para>
        </section>
    </section>

    <section id="create-app-with-docker:compose">
        <title>Create a Multi Container App</title>
        <para>
            Starting with UCS 4.3-2 errata 345 Univention App Center supports
            apps that consist of multiple Docker images. It uses <ulink
                url="https://docs.docker.com/compose/overview/">Docker
                Compose</ulink>, a tool for defining and running
            multi-container Docker applications. The heart of such applications
            is a YAML file that configures all services for the application.
            The supported compose file format version is 2.0.
        </para>
        <section id="create-app-with-docker:setup">
            <title>Multi container setup</title>
            <para>
                In order to create a Multi Container App, go to the
                <guimenu>Configuration</guimenu> tab in the App Provider
                Portal, select <guimenu>Multi container app with Docker
                    compose</guimenu> and enter the content of your
                <option>docker-compose.yml</option> file. A "flat" YAML file
                must be used, because the implementation does currently not
                support references to other files like for example files that
                should be mounted inside a container or files listing
                environment variables.
            </para>
            <para>
                Univention Configuration Registry, UCR for short, is the
                central tool for managing the local system configuration of UCS
                (see <ulink
                    url="https://docs.software-univention.de/manual-4.4.html#computers:Administration_of_local_system_configuration_with_Univention_Configuration_Registry">Manual
                    for users and administrators</ulink>). Settings from UCR can
                be used in the Docker compose file to parameterize the Docker
                setup. This comes in very handy when settings like for example
                the local LDAP server should be passed to a container via its
                environment variables.
                <programlisting>
[...]
services:
    [...]
    environment:
        ROOT_URL: https://@%@hostname@%@.@%@domainname@%@/$appid
        LDAP_Host: "@%@ldap/server/name@%@"
        LDAP_Port: "@%@ldap/server/port@%@"
        LDAP_BaseDN: "@%@ldap/base@%@"
        LDAP_Authentication_UserDN: "@%@appcenter/apps/$appid/hostdn@%@"
    [...]
                </programlisting>
                The example above is an excerpt from a Docker compose file
                where environment variables are defined for a service. The
                values of the variables are set to the values of the given UCR
                variable. <userinput>$appid</userinput> needs to be replaced
                manually by you app id. UCR variables are enclosed by
                <userinput>@%@</userinput>. Please mind the double quotes.
            </para>
            <para>
                  You also need to define the <guimenu>Name of the "main" service
                  within the docker-compose.yml</guimenu> below the <guimenu>Contents
                  of the docker-compose.yml file</guimenu>.
            </para>
            <para>
                In order to provide access to the application's web interface,
                please see <xref linkend="create-app-with-docker:web-interface" />.
            </para>
            <para>
                If the app setup requires exclusive ports and a list of ports needs
                to get forwarded from the host to the container, please see <xref
                    linkend="create-app-with-docker:ports" />.
            </para>
        </section>
        <section id="create-app-with-docker:script-reference">
            <title>Script execution reference</title>
            <para>
                The App Center allows several scripts to be executed on the host
                and inside the container during installation (<xref
                    linkend="installation-scripts" />), uninstallation (<xref
                    linkend="uninstallation-scripts" />) and upgrade (<xref
                    linkend="upgrade-scripts" />). Scripts run inside the
                    container are run inside the container of the "main service".
            </para>
        </section>
        <section id="create-app-with-docker:compose-postprocessing">
            <title>Post processing of Docker Compose file</title>
            <para>
                Before a Multi Container App is started by the App Center, the
                <filename>docker-compose.yml</filename> is altered by the App
                Center with the following changes:
            </para>
                <orderedlist>
                    <listitem>
                        <simpara>
                            When a Multi Container App is released, the
                            <filename>docker-compose.yml</filename> is adjusted on
                            the server side and the Docker Image information is
                            changed to point to the Docker Images in the
                            Univention Docker Registry.  All Docker Images from
                            published apps are copied to the Univention Docker
                            Registry to be independent of <uri>hub.docker.com</uri>.
                            This is the only server-side change
                            to the Docker Compose file.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
														The <filename>docker-compose.yml</filename> is
														itself a UCR template. As such, it will be
														interpreted by the App Center before being used.
														See <xref linkend="ucr-template" /> for details.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The App Center adds two standard volumes for the
                            main service, as they are also included in Single
                            Container Apps. These are the
                            <filename>/var/lib/univention-appcenter/apps/<replaceable>$appid</replaceable>/data</filename>
                            and
                            <filename>/var/lib/univention-appcenter/apps/<replaceable>$appid</replaceable>/conf</filename>
                            directories on the UCS host. If volumes are defined
                            in the App Provider Portal in the App
                            Configuration, these are also supplemented in
                            <filename>docker-compose.yml</filename> by the App
                            Center for the main service.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            If ports are defined in the App Provider Portal,
                            they are also added to
                            <filename>docker-compose.yml</filename>. Ports that
                            have already been defined continue to exist. If the
                            same port is defined in the portal and in
                            <filename>docker-compose.yml</filename>, the
                            configuration in the App Provider Portal takes
                            precedence. For example, if
                            <filename>docker-compose.yml</filename> states that
                            port 4500 is provided externally as port 4500, but
                            the portal defines that this port is to be used as
                            6500, <filename>docker-compose.yml</filename> will be
                            modified to map port 4500 to 6500 on the host.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            If <filename>docker-compose.yml</filename> specifies
                            that port 80 or 443 should be opened to the outside
                            and the App Configuration specifies that these
                            ports should be used by the App Center for the web
                            interface, the App Center will define a port on the
                            fly in <filename>docker-compose.yml</filename>.
                            This is because UCS hosts usually occupy ports 80
                            and 443 with a web server. The App Center creates
                            an Apache Reverse Proxy configuration. See section
                            <xref
                                linkend="create-app-with-docker:web-interface"
                                /> for details.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            UCS provides a number of environment variables via
                            the App Center, e.g. parameters for an LDAP
                            connection. The necessary variables are also
                            written to <filename>docker-compose.yml</filename> in
                            the <option>environments</option> section.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            Furthermore, in the main service, as in Single
                            Container Apps, all UCR variables defined on UCS
                            are available under
                            <filename>/etc/univention/base.conf</filename>, as
                            well as the password for the so-called machine
                            account under
                            <filename>/etc/machine.secret</filename>.
                        </simpara>
                    </listitem>
                </orderedlist>
                <para>
                    As a result, Docker Compose starts a configuration on the
                    UCS system that no longer matches 100% of the App
                    Provider's input. The modified
                    <filename>docker-compose.yml</filename> can be found at
                    <filename>/var/lib/univention-appcenter/apps/<replaceable>$appid</replaceable>/compose/docker-compose.yml</filename>.
                </para>
            <para id="ucr-template">
							As stated above, the <filename>docker-compose.yml</filename> is a
							UCR template. This means that you are able to match the file to
							the environment of the Docker host. The <ulink
                url="https://docs.software-univention.de/developer-reference-4.4.html">Univention
                Developer Reference</ulink> knows
							more about UCR templates, but the core mechanics are:
            </para>
                <orderedlist>
                    <listitem>
                        <simpara>
													Although every
													<filename>docker-compose.yml</filename> is a UCR
													template, you may not notice it: Where no specific
													tags are used, the very content is used. So if your
													file does not need any of the features mentioned
													below, just use your plain
													<filename>docker-compose.yml</filename>.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                                                    You can add specific values
                                                    of the Config Registry into
                                                    your file. More
                                                    importantly, this includes
                                                    the App settings in <xref
                                                        linkend="app-settings"/>
                                                    defined by the App itself:
                        </simpara>
													<programlisting>
environment:
	MY_KEY: @%@myapp/mysetting@%@
</programlisting>
                        <simpara>
													Note that App Settings are always added to the main
													service automatically. But this allows adding them to
													other containers and using them as part of a
													composite value.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
													You can do Python scripting within the template, e.g.
													to read (and write) the content of specific files.
                        </simpara>
													<programlisting>
environment:
	MY_SECRET: @!@import uuid; print(uuid.uuid4())@!@
</programlisting>
                        <simpara>
													Note that currently, you cannot access App Settings
													within the Python script.
                        </simpara>
                    </listitem>
									</orderedlist>
        </section>
        <section id="create-app-with-docker:finish">
            <title>Finish multi container setup</title>
            <para>
                As soon as all the technical settings are made, please see <xref
                    linkend="app-lifecycle" /> for the next steps and how to
                test the app. For app presentation in the App Center please see
                <xref linkend="app-presentation" />.
            </para>
        </section>
    </section>
</chapter>

<chapter id="app-lifecycle">
    <title>App life cycle</title>

    <para>
        This chapter relates the life cycle of an app from the first app
        development, its life in the public to termination. The life cycle
        applies to the app overall and to every single version.
    </para>

    <section id="development">
        <title>Development</title>
        <para>
            Every app starts with its development. It involves the definition
            of the app in the App Provider Portal, providing the software
            solution as a Docker image (see <xref linkend="get-started" />)
            and the integration of the solution with UCS, for example in the
            identity management area (see <xref linkend="connection-idm" />).
            This part of the life cycle can be divided into two steps: setup
            and integration.
        </para>

        <section id="development:best-practice">
            <title>Best practice for app development environment</title>
            <para>
                This section briefly describes best practices on the development and
                testing environment for apps dedicated to the Univention App
                Center. The recommendations aim at reducing repeatable time
                efforts that, for example, are caused by the download of Docker
                images.
            </para>
            <para>
                The development of apps mainly involves the App Provider portal
                and a local instance of Univention Corporate Server (UCS). To
                setup your UCS environment the best practice is to download one
                of the UCS virtual machine images and use VirtualBox or VMware
                (see <xref linkend="testing:download" />). After the
                installation, <ulink
                    url="https://docs.software-univention.de/manual-4.4.html#central:license">activate
                    the system</ulink> and copy your SSH key to the UCS system
                to save typing the password on each remote console login.
                Finally, activate the Test App Center (see <xref
                    linkend="testing:test-app-center" />). With that status it
                is a good time to make a snapshot of the system, which allows
                to got back to that status. Afterwards, app specific time
                consuming tasks can be prepared to reduce recurring waiting
                times. Among them are for example an optional <command>docker
                    login</command> to gain access to a private Docker image
                or even the own Docker registry, and the manual download of the
                app's Docker image(s) with <command>docker pull</command>
                (for single container apps) or <command>docker-compose -p
                    <replaceable>$appid</replaceable> pull</command> (for multi container apps) from the
                within the <filename>docker-compose.yml</filename> directory of
                the app (see <xref linkend="testing:debugging" />). And then
                also make a new snapshot. Especially, having the Docker
                image(s) locally saves download time during recurring
                installation test cycles.
            </para>
            <para>
                With the last snapshot there is a prepared system that can
                serve as starting point for app installation and associated
                testing. The development iteration cycles are a dance of
                changes in the App Provider portal and testing the installation
                and app integration. After returning to a snapshot, it is
                recommended to update the local App Center cache. This is
                either automatically done during login and opening of the App
                Center module in the UCS management system or triggered
                manually with <command>univention-app update</command> on
                the console.
            </para>
        </section>
    </section>

    <section id="testing">
        <title>Testing</title>
        <para>
            Testing the app is the final part of its development. It typically
            involves a combination of manual and automatic tests. In order to
            test the app with UCS, please follow these instructions.
        </para>

        <section id="testing:download">
            <title>Download UCS</title>
            <para>
                Download UCS to get a copy of UCS free of charge from
                the <ulink
                    url="https://www.univention.com/downloads/ucs-download/">Univention
                    website</ulink>. Choose an ISO image or a pre-installed
                virtual machine image for various virtualization hypervisors,
                like for example VMware (ESXi and Workstations), VirtualBox and
                KVM.
            </para>
        </section>

        <section id="testing:setup">
            <title>Initial UCS setup</title>
            <para>
                Please refer to the <ulink
                    url="https://docs.software-univention.de/quickstart-en-4.4.html">UCS
                    Quickstart Guide</ulink> for the first steps about
                installation and initial setup.
            </para>
        </section>

        <section id="testing:test-app-center">
            <title>Test App Center</title>
            <para>
                Switch to the Test App Center Repository and test the app
                directly on the UCS system set up before.
<programlisting language="sh">
univention-install univention-appcenter-dev
univention-app dev-use-test-appcenter
</programlisting>
            </para>
        </section>

        <section id="testing:install">
            <title>Install the app</title>
            <para>
                Up until here, the app is available in the Test App Center and
                a UCS system is up and running that is configured against
                the Test App Center. The app can be installed via the &ucsUMC;.
                UMC consists of several modules and one of them is called
                <guimenu>App Center</guimenu>. Open this module and install
                the app from there.
            </para>

                <figure id="testing:install:app-center-umc-module">
                    <title>Univention Management Console overview with App Center module</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/umc-module-app-center.png"/>
                </figure>

            <para>
                The following points are mandatory for the App to be published:
                <itemizedlist>
                    <listitem>
                        <simpara>
                            The App has to install without user interaction.
                            Exceptions are configuration parameters obtained
                            via App Settings (see <xref linkend="app-settings"
                                />).
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The App may not negatively impact UCS' core services.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The App has to uninstall without leaving any remainders that interfere with UCS' core services.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The app is working with the UCS versions that are
                            configured as Supported UCS version (see <xref
                                linkend="create-app-with-docker:supported-ucs-version"
                                />).
                        </simpara>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
                When installing the App, also mind README information that may
                have been defined on the <guimenu>Additional texts</guimenu>
                tab in the app in the App Provider Portal after activating it
                with the option <guimenu>Additional texts with information for
                    UCS system administrators</guimenu> on the
                <guimenu>Overview</guimenu> tab in the
                <guimenu>Modules</guimenu> section. An Administrator expects an
                app to be fully configured after the installation. If something
                is needed in order to use the app (e.g., activating users for
                the service), it should be described in the appropriate README
                section (see <xref linkend="readme" />).
            </para>
        </section>

        <section id="testing:upgrade">
            <title>Upgrade the app</title>
            <para>
                Once several versions of the app exist, the upgrade should be
                tested, as well. The App Center UMC module only allows the
                installation of the latest app version. To test an upgrade of
                the app, please go to the console and install a version
                explicitly:

                <programlisting language="sh">
                    univention-app install myapp=1.0
                </programlisting>

                Afterwards, go back to the App Center UMC module. There, the
                app should show up with the update symbol indicating the
                availability of an update. Continue and perform
                the app upgrade.
            </para>
        </section>

        <section id="testing:checklist">
            <title>Test checklist</title>
            <para>
                The following list gives an idea what the app provider should test before the app is approved
                for release or update. The list cannot cover all possible items, but mentions what is missed
                repeatedly.
                <itemizedlist>
                    <listitem>
                        <simpara>
                            Integration with UCS identity management: Does the login with activated users work?
                            Will the login be blocked for users that are not activated for the app?
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            Environment with proxy: How does the app behave when a proxy is configured in the UCS environment?
                            Does the app take the proxy settings into account? Does the app work as expected? Is the networking
                            still working properly for the app?
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            Description and documentation: Are the texts consistent in content?
                            Can they be understood easily? Is the description of technical steps complete and correct,
                            especially path and file names?
                        </simpara>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="testing:deactive-test-app-center">
            <title>Deactivate the Test App Center</title>
            <para>
                To switch back to the productive App Center, please run:

                <programlisting language="sh">
                    univention-app dev-use-test-appcenter --revert
                </programlisting>
            </para>
        </section>

        <section id="testing:automation-for-providers">
            <title>Automated testing for App Providers</title>
            <para>
                Univention always runs automated tests on an app before it
                is released. This testing infrastructure can be used by the app
                provider to increase the test coverage for the app. This can
                save manual testing efforts.
            </para>

        <!--
        TODO: Section about how providers can use testing infrastructure for automated tests.

        * How does automated testing apply to Docker apps?
        * Where can the settings be made?
        * How does it work in principle?
        * What are the requirements?

        https://wiki.univention.de/index.php/Ucs-test is probably not the right
        resource for the topic, because it requires a debian package.
        -->
            <para>
                A test script for the app can be provided in the
                <guimenu>Testing</guimenu> tab. The script needs to be entered
                in the text area <guimenu>Test script run after
                    installation</guimenu>. It is run together with the
                automatic app tests in the Univention test infrastructure and
                will be executed after the app has been installed during those
                tests.
            </para>
            <para>
                On successful tests, the script has to end with exit code 0.
                <userinput>--binddn</userinput> and
                <userinput>--bindpwdfile</userinput> are passed, so that the
                command line interface of UDM can be used easily.  Here is an
                example:
                <programlisting>
#!/bin/bash
set -e
udm users/user create "$@" \  # passes --binddn etc
  --set username=myapp-test-user \
  --set password=s3cr3t-pwd \
  --set lastname=Test \
  --set myappActivated=TRUE
sleep 10
curl http://localhost/myapp/login ...
                </programlisting>
            </para>
            <para>
                For certain tests user credentials for access to the directory
                service are needed. They are passed with the parameters
                <option>binddn</option> and <option>bindpwd</option>. In many
                cases the user <systemitem class="username">Administrator</systemitem> is used. The
                Administrator credentials are only important for UDM calls on
                UCS systems that are not the DC Master.
            </para>
            <para>
                The test script can be manually tested.
                <programlisting>
univention-install univention-appcenter-dev
univention-app dev-use-test-appcenter
univention-app install my-app
univention-app dev-test-setup  # installs common testing libs like selenium
univention-app dev-test \
  --appcenter-server http://appcenter-test.software-univention.de\
  my-app \  # every additional parameter is passed to the script
  --binddn $DN \
  --bindpwd $BINDPWD
                </programlisting>
            </para>
        </section>

        <section id="testing:debugging">
            <title>Debugging</title>
            <para>
                During app development or for problem analysis it may be necessary
                to debug an app. If an app installation fails, the App Center
                removes the Docker container and thus prevents the developer to
                have a deeper look into what happened. With the following
                command the App Center will not throw away a failed app
                installation. The container is kept on the system.
                <programlisting language="sh">
                    univention-app install myapp --do-not-revert
                </programlisting>
            </para>
            <para>
                For debugging or support cases it can be helpful to enter the
                app container. The following command opens a shell in the
                container.
                <programlisting language="sh">
                    univention-app shell myapp
                </programlisting>
                If the container does not support a shell, the container can be
                entered with the plain Docker commands.
                <programlisting language="sh">
CONTAINER="$(ucr get appcenter/apps/myapp/container)"
docker exec "$CONTAINER" ...
                </programlisting>
            </para>
            <para>
                To view the Docker logfiles for the app, please use the following command:
                <programlisting language="sh">
univention-app logs $appid  # equivalent to docker logs $CONTAINER
                </programlisting>
                For multi container apps using Docker compose, those logging information can be viewed with:
                <programlisting language="sh">
cd /var/lib/univention-appcenter/apps/$appid/compose
docker-compose -p $appid logs
                </programlisting>
            </para>
            <para>
                Important logfiles on the UCS host for debugging are:
            </para>
            <itemizedlist spacing="compact">
                <listitem><simpara><filename>/var/log/univention/appcenter.log</filename></simpara></listitem>
                <listitem><simpara><filename>/var/log/univention/management-console-module-appcenter.log</filename></simpara></listitem>
                <listitem><simpara><filename>/var/log/univention/join.log</filename></simpara></listitem>
                <listitem><simpara><filename>/var/log/docker.log</filename></simpara></listitem>
            </itemizedlist>
        </section>
    </section>

    <section id="approval">
        <title>Two-way approval</title>
        <para>
            Testing the app also involves giving an approval for the release
            of the app. Each app in the App Center requires a two-way approval,
            one from the app provider and one from Univention. The app provider
            starts with the process and performs the tests to give the approval
            for its app.
        </para>

        <para>
            The app provider's approval is given by clicking on
            <guimenu>Approve for release</guimenu> in the App Provider Portal. The
            Univention App Center team is notified and they will start the
            automated tests. As soon as the automated tests are successful, the
            second approval is available and the app is ready to be released.
        </para>
        <para>
            The automated tests conducted by Univention test for installation,
            un-installation and re-installation of the app for different UCS
            system roles. They check for proper operation of the UCS services.
            No app functionality will be tested. The tests are for ensuring that the
            app does not break UCS functionality.
        </para>
        <para>
            Besides the technical testing, the first release also undergoes a
            manual review process on the app presentation. The app description
            is checked for plausibility, understandability and for the App
            Center context.
        </para>

    </section>

    <section id="release">
        <title>Release</title>
        <para>
            As soon as the app is ready for release, it is copied to the
            productive App Center by the Univention App Center team. This
            involves the app's presentation material as well as the Docker
            image. Univention maintains an own Docker registry. The Docker
            image is copied to that registry and the reference to the Docker
            image is updated accordingly in the app definition. The app will
            be visible in the App Center UMC module immediately for all UCS
            users after release. The app catalog is updated automatically and
            shows the new app.
        </para>
    </section>

    <section id="updates">
        <title>Updates</title>
        <para>
            After the release of the first version the app enters
            "maintenance mode" and receives updates from the app provider. The
            evolution of an app is represented by its version. In order to
            provide an update for the app, follow these steps:

            <orderedlist>
                <listitem>
                    <simpara>
                        Go to the <guimenu>Apps</guimenu> UMC module in the App
                        Provider Portal and search for the app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Create a new version of the app: Mouse over the app's
                        tile, click the menu in the upper right corner of the
                        tile and select <guimenu>New App Version</guimenu>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Enter the values for source and target version. The
                        App Provider Portal will then copy the source app
                        configuration to the target.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Open the new app version and make the appropriate
                        changes, e.g. the version tag for the Docker image.
                        Usual places for changes involve the scripts and maybe
                        the integration. Texts and logos should be checked if
                        they are still up to date.
                    </simpara>
                </listitem>
            </orderedlist>
        </para>

            <figure id="app-life-cycle:update:create-new-version">
                <title>Menu to add a new App</title>
                <graphic scalefit="1" width="28%" fileref="illustrations44/app_portal_create_new_version.png"/>
            </figure>
            <figure id="app-life-cycle:update:new-version">
                <title>Add a new App version</title>
                <graphic scalefit="1" width="28%" fileref="illustrations44/app_portal_new_version.png"/>
            </figure>
    </section>

    <section id="termination">
        <title>Termination (end of life)</title>
        <para>
            If the app provider decides to discontinue an app and stop
            maintenance, the app can be terminated by setting it <userinput>end
                of life</userinput>. As soon as an app is published in status
            end of life, UCS system administrators won't be able to install it
            anymore. UCS systems that already have the app installed, will show
            a notification in the App Center that informs the UCS system
            administrator that they should look for alternative solutions.
        </para>

        <para>
            App versions are not explicitly terminated. They are superseded by
            the next version. The termination applies to the whole app.
        </para>
        <para>
            The app can be terminated by going to the app's configuration in
            the App Provider Portal. Please go to the
            <guimenu>Advanced</guimenu> tab to the section <guimenu>Custom
                configuration</guimenu>. Create a new custom configuration with the
            <option>Custom key</option> <userinput>EndOfLife</userinput> and
            the <option>Custom value</option> <userinput>True</userinput>.
            Afterwards press <guimenu>Save</guimenu> and
            <guimenu>Approve for release</guimenu>. Please provide a custom message in
            the publish dialog and let the App Center team know about the
            reasons for the termination.
        </para>
    </section>

    <section id="upload-interface">
        <title>App Provider Portal upload interface</title>
        <para>
            An app is configured via the App Provider Portal, which offers a
            web interface. There is also an upload interface available. If the
            developer prefers to keep the app configuration in a version control
            system, the upload interface offers a good way to push changes for
            the app to the Test App Center. The script can also be used in
            non-interactive mode within other scripts. In such cases username
            and password should be stored in separate files (no new line at the
            end) that are passed as parameters.
        </para>

        <para>
            The scripts needs to be downloaded from <ulink
                url="https://provider-portal.software-univention.de/appcenter-selfservice/univention-appcenter-control">https://provider-portal.software-univention.de/appcenter-selfservice/univention-appcenter-control</ulink>.
            It requires Python 2.7 and cURL to run. For a list of available
            actions and their parameters, use the script's help:
                <programlisting language="sh">
./univention-appcenter-control --help
./univention-appcenter-control upload --help
                </programlisting>
        </para>

        <para>
            The following examples show how the script can be used.
            <programlisting language="sh">
# creates a new version based on the latest version of myapp
./univention-appcenter-control new-version 4.4/myapp

# finds out on which UCS versions this Docker App may be installed
# Note: jq is an external tool: apt-get install jq
# you may parse JSON without it, of course
./univention-appcenter-control get --json 4.4/myapp |
	jq '._ini_vars.SupportedUCSVersions'

# creates version 2.0 of myapp based on the (formerly) latest version
./univention-appcenter-control new-version 4.4/myapp 4.4/myapp=2.0

# sets the DockerImage of the new app
./univention-appcenter-control set 4.4/myapp=2.0 \
	--json '{"DockerImage": "mycompany/myimage:2.0"}'

# copies myapp Version 1.0 from UCS 4.2 to UCS 4.4.
./univention-appcenter-control new-version 4.2/myapp=1.0 4.4/myapp=1.0

# uploads all README files in the current folder to the latest version
# myapp in UCS 4.2
./univention-appcenter-control upload 4.4/myapp README*

# uploads an image. Will be rejected if this image is not specified
# somewhere in the ini file. Note: This may overwrite the logo for other
# version using the same logo name, too.
./univention-appcenter-control upload 4.4/myapp=1.0 myapp.svg
            </programlisting>
        </para>
        <para>
            The script can also be used to automate the creation of a new app version for an app update. The generics steps are the following:
            <orderedlist>
                <listitem>
                    <simpara>
                        Create a new version in the provider portal via the upload script based on the latest published version.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        For single container apps update the reference to the
                        app's Docker image and its version. For multi container
                        apps, download the compose file, update the references
                        to the Docker images of the services there and upload
                        the compose file.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Perform the usual tests before approving an app update
                        for release.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Send an email to the App Center team and approve the
                        release. Please provide information about the UCS
                        section, the app's version and the internal component
                        reference. It's best to provide this information in the
                        email's subject and it can look like this: "Regarding
                        4.4/myapp=4.74 (myapp_20201106183244)"
                    </simpara>
                </listitem>
            </orderedlist>
        </para>
        <para>
            The following examples show how to run the steps with the upload
            interface. The examples assume that the password to the portal is
            stored in a password file which is given as parameter to the
            script:
            <programlisting language="sh">
APP_UPGRADE_FROM="12.1"
APP_VERSION="12.2"
UCS_MINOR="4.4
MY_APP="myapp"
pwd_file="portal_password"


# 1. Create a new version in the app provider portal
./univention-appcenter-control new-version --username $my_username --pwdfile $pwd_file $UCS_MINOR/$MY_APP $UCS_MINOR/$MY_APP=$APP_VERSION


## First example for single container apps

# 2. Update the reference to the app's Docker image
./univention-appcenter-control set --username $my_username --pwdfile $pwd_file $UCS_MINOR/$MY_APP=$APP_VERSION --json '{"DockerImage": "my_company/$MY_APP:$APP_VERSION"}'

# 3. Obtain the component id of the new app version. The command asumes the latest component is the new app.
COMPONENT=$(./univention-appcenter-control status --username $my_username --pwdfile $pwd_file $UCS_MINOR/$MY_APP | grep "COMPONENT" | tail -n 1 | cut -f 2 -d ':' | trim -d ' ')

# 3. Send the email
SUBJECT="Regarding $UCS_MINOR/$MY_APP=$APP_VERSION ($COMPONENT)"


####

# Second example for multi container apps

# 2. Get app configuration data
./univention-appcenter-control get $UCS_MINOR/$MY_APP=$APP_VERSION --json --username $my_username --pwdfile $pwd_file > $MY_APP.json

# 3. Extract the compose content
cat $MY_APP.json | jq -r .compose > compose

# Edit the compose file accordingly. A custom script can help to automate this step.
# This script depends on the app and the compose file content
# Replace the "image: " lines and refer to the upstream Docker images and their respective tags

# 4. Upload altered compose file
./univention-appcenter-control upload --username $my_username --pwdfile $pwd_file --non-interactive $UCS_MINOR/$MY_APP=$APP_VERSION compose

# 5. Send the mail and with subject as described above
            </programlisting>
        </para>
    </section>

</chapter>

<chapter id="app-presentation">
    <title>App presentation</title>

    <para>
        This chapter is about how the app is presented to the user with texts,
        logos, screenshots and videos. The contents are part of the app
        configuration. They are shown to the UCS system administrator in the
        App Center UMC module in UCS and to users on the Univention website in
        the <ulink
            url="https://www.univention.com/products/univention-app-center/app-catalog/">App
            Catalog</ulink>.
    </para>
    <para>
        All changes are made in the App Provider portal. They need to be saved
        by pressing the button <guimenu>Save</guimenu>. Then a release can be
        requested via the button <guimenu>Approve for release</guimenu>. The
        items mentioned in this chapter can be changed and published any time
        and do not require a new version of the app.
    </para>

    <section id="logos">
        <title>Logos</title>
        <para>
            All logos uploaded to the App Provider Portal have to be SVG
            format, which is most flexible for the presentation purposes.
        </para>

        <important>
            <para>
                When SVG files are created or exported, please make sure that
                fonts are converted to paths before export. Otherwise the text
                in the logos is not rendered properly and the logo may look
                odd.
            </para>
            <para>
                Please also do not simply import a bitmap graphic into SVG and
                export it. Results after scaling may not look good, because the
                logo is basically a bitmap in SVG apparel.
            </para>
        </important>

        <para>
            The logos can be uploaded on the <guimenu>Presentation</guimenu> tab in
            the <guimenu>Logos</guimenu> section. Two icons are needed: One for
            the app tile on the overview page and a more detailed logo for the
            app page. The tile has only limited space in square format. Please
            make sure, the logo can still be recognized. The detailed logo is
            not limited. Most logos for this slot have a landscape orientation.
            The App Center and the App Catalog take care of the appropriate
            scaling. SVG allows a very good result due to its nature as a vector
            graphics format.
        </para>
    </section>

    <section id="screentshots">
        <title>Screenshots and videos</title>
        <para>
            Screenshots and videos are a good way to introduce the solution to
            the user. To add screenshots please go to the <guimenu>Screenshots
                &amp; YouTube videos</guimenu> section on the
            <guimenu>Presentation</guimenu> tab. Screenshots can be in PNG or
            JPG format. Videos have to be published on YouTube and the full
            YouTube link has to be provided in the App Provider Portal. Please
            keep in mind to provide the material for English and German
            speaking audience.
        </para>
        <para>
             If the same screenshots exist in German, it is recommended that
             they are added, as well.
        </para>
        <para>
            Comprehensive visualizations can be added optionally which make it
            easier to understand the app's description. Give the image files
            sensible names including the keywords. An example of a bad file
            name for an image would be <filename>app_76bz3.jpg</filename>, whereas
            <filename>app_name.jpg</filename> would be much better.
        </para>
    </section>

    <section id="description">
        <title>Description</title>
        <para>
            The full description is the text introducing the solution to the
            user and thus is very important for getting their attention. Here are
            some tips intended to help to present the app in a
            user-friendly, customer-oriented, and search-engine-optimized
            manner.
            <itemizedlist>
                <listitem>
                    <simpara>
                        Unique content with at least 300 words. Not a copy from
                        the solutions web page.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Content: What does the app do? The added value and
                        benefits should be described and examples be provided.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The app is running on UCS. What is the added value that
                        the combination of UCS and the app offers to the
                        customer?
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        It is important for the user to understand which
                        "edition" of the solution is installed and what
                        features or limitations are included. Please also
                        provide information on how to "upgrade" to the next
                        "edition".
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The text should be structured in paragraphs.
                        Subheadings and lists should be used.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Search engines should be kept in mind and keywords be
                        used.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Links should be furnished with all HTML attributes.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Include supporting images/screenshots and define them
                        in the app configuration (not within description).
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            The description is provided in HTML format. If more control
            on the HTML is needed, switch to HTML source mode and edit the HTML
            directly. Here sections and headings can be added.
        </para>
        <note>
            <para>
                Custom styles in CSS should not be used, because they may
                distract from the overall impression. The App Center UMC module and
                the App Catalog already have respective CSS style definitions.
            </para>
        </note>
        <para>
            The length of the description depends on how much there is to say
            and how much explanation the app requires. Ideally the description
            should be at least 300 words long. The text should be structured
            and paragraphs should be used to make it easier to read. The target group are
            potential customers. Subheadings (HTML: <wordasword>h2,
                h3</wordasword>) should be used to divide the text into logical
            sections. It is very helpful for the reader to be able to see the
            advantages of the app and its combination with UCS at a glance. For
            this reason, presentation of the advantages in lists (HTML:
            <wordasword>ol, ul, li</wordasword>) is particularly practical.
        </para>
        <para>
            If links are used in the app description (e.g., to pages on
            the solution's own website), please always use the
            <userinput>target="_blank"</userinput> (open in new tab) and assign
            the link a title attribute. Please keep the use of links to a
            minimum and ideally use the fields provided especially for this
            purpose in the app metadata.
        </para>
    </section>

    <section id="category">
        <title>Categories</title>
        <para>
            On the <guimenu>Presentation</guimenu> tab the app can be given one
            or more categories from a given set in the <guimenu>App
                categories</guimenu> section. Users can filter the app overview
            in the App Center and in the App Catalog accordingly. App
            categories help to group apps together by topic and give a better
            overview for the various apps available.
        </para>
    </section>

    <section id="contact">
        <title>Contact</title>
        <para>
            For the users it is important to know who is the producer of the
            app. For this purpose there is the <guimenu>Responsibility: Contact
                information</guimenu> section on the
            <guimenu>Presentation</guimenu> tab in the App Provider Portal.
            Please provide product contact information like an email address
            and a website to the solution. Please also link to a website, where
            the app provider's support options and pricing is explained to
            potential customers and place the link in the field <guilabel>Link
                to website with product support options</guilabel>.
        </para>
    </section>

    <section id="license">
        <title>License</title>
        <para>
            In the <guimenu>License</guimenu> section on the
            <guimenu>Presentation</guimenu> tab license information can be
            defined; for example, a license agreement. This has to be read and
            accepted by a UCS system administrator before the app is installed.
            If the text is not accepted, the installation process is aborted
            and no app is installed. The license agreement is mostly used by
            app providers for legal information that needs confirmation by the
            administrator before anything is installed. If such a text is not
            needed, leave it empty.
        </para>
        <para>
            UCS system administrators have to register with a valid email
            address in order to use the App Center. If the app provider
            configures an email address in the field <guimenu>E-mail address for
                App install notifications</guimenu> it receives information on a
            daily basis about who installed the app. The App Center UMC
            module informs the user that the app provider may contact them. App
            providers can use the address, for example, for lead management.
        </para>
        <para>
            The last setting is intended to provide the users a rough
            imagination about the license type of the software. One option
            best fitting to the solution should be chosen:
        </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <simpara>
                        <userinput>Empty</userinput>: If no value is given, the
                        App Center UMC module and the App Catalog will show the
                        text "Please contact the App provider for further
                        license details".
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Free commercial use</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Free commercial use. Some functions or
                            services are liable to costs.</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Liable to Costs with Free Trial</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Liable to Costs</userinput>
                    </simpara>
                </listitem>
            </itemizedlist>
    </section>

    <section id="readme">
        <title>README for the administrator</title>
        <para>
            In the tab <guimenu>Additional texts</guimenu> further information
            for an app can be provided that show up at certain stages of the
            app life cycle. Those README files are also in HTML like the description
            and content can be provided the same way (see <xref
                linkend="description" />).  The App Provider Portal describes
            when each README file shows up.
        </para>
        <para>
            It is highly recommended to use the README files to show
            information that should not go in the app description, like
            for example configuration details, hints before and after an
            update, etc. Please also keep in mind to provide a proper
            German translation.
        </para>
    </section>

    <section id="translation">
        <title>Translations</title>
        <para>
            All texts, screenshots and videos should be entered in English.
            Translations to German should be only made in the appropriate field
            next to the English text. It should be made sure that translations
            for the texts that have an English version are provided. Otherwise,
            English text will show up for a user with German language settings.
        </para>
    </section>

    <section id="recommended-apps">
        <title>Recommended Apps Badge</title>
        <para>
            Apps can be awarded with different badges and are therefore
            especially highlighted in the App Center. One of those badges is
            the <ulink
                url="https://www.univention.com/products/univention-app-center/app-catalog/?recommended_app=1">"Recommended
                Apps"</ulink> award for the use in professional environments.
            Apps with the "Recommended Apps" award meet the below listed
            quality criteria. The functional scope of the software solution is
            not evaluated. The award is assigned by the Univention App Center
            Team and the criteria serve as decision guidelines.
        </para>
        <itemizedlist>
            <listitem>
                <simpara>
                    The app can be installed and uninstalled cleanly and does
                    not alter the UCS system against the rules.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    Univention is not aware of any open security
                    vulnerabilities for the app or the app provider has
                    promised to remedy the vulnerabilities soon. In principle,
                    Univention does not carry out any active security
                    monitoring for apps in the App Center. If Univention
                    becomes aware of security vulnerabilities, the App provider
                    will be informed and a deadline for an update will be
                    agreed upon.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    The version of the software solution offered in the App
                    Center is maintained by the app provider.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    If the software solution requires user accounts to identify
                    users, the app uses UCS Identity Management as a source of
                    user accounts.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    The app provider makes updates of its software for the app
                    available regularly and promptly to UCS via the App Center.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    If the app provider offers update paths for its software
                    solution, the app also supports these update paths.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    The app vendor ensures that the app deploys its software
                    solution to new UCS versions within a short period of time,
                    ensuring that administrators can update UCS.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    Commercial support is available for the app.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    The app has been available in the App Center for at least 3 months.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    For the app, there are virtual app appliances that are
                    linked on the app vendor's website for download. This makes
                    commissioning the app on UCS extremely easy.
                </simpara>
            </listitem>
        </itemizedlist>
    </section>

</chapter>

<chapter id="connection-idm">
    <title>Connection with Identity Management</title>

    <para>
        One of the <wordasword>UCS's</wordasword> key features is the
        integrated identity management (IDM). With this central identity
        management, users benefit, among other things, from a single login
        independent of which services or systems they use. It is highly
        recommended to integrate the app into the identity management system.
    </para>

    <para>
        If the app should benefit from the identity management, the flag
        <guimenu>The administrator needs to enable users for the app</guimenu>
        should be activated in the App Provider Portal on the <guimenu>Identity
            management</guimenu> tab under the <guimenu>User rights
            management</guimenu> section. This extends the IDM by a checkbox
        and an administrator of the UCS system can activate or deactivate each
        user individually for the app. The setting can then be found in the
        Users UMC module and is called <guimenu>Apps</guimenu>. It is also
        possible to make significantly more complex settings. See <xref
            linkend="user-rights-management" /> for more details.
    </para>

    <section id="provisioning">
        <title>Provisioning</title>

        <para>
            There are different ways in which applications can access
            provisioning information. The following describes a pull and
            push-based procedure.
        </para>

        <section id="provisioning:pull">
            <title>Automatically via LDAP connection (Pull)</title>
            <para>
				UCS stores the user and group information in an OpenLDAP based
				directory. Thus, the default information can be accessed via
				the LDAP protocol. Objects are identified by an LDAP filter.
				The following filter can be used to search for users
				"<wordasword>(univentionObjectType=users/user)</wordasword>" and
				for groups the filter
				"<wordasword>(univentionObjectType=groups/group)</wordasword>"
				can be used.
            </para>
            <para>
                If the user activation is used (<guimenu>The administrator
                    needs to enable users for the app</guimenu>), the following
                LDAP filter can be used:
                <wordasword>(&amp;(univentionObjectType=users/user)(myappActivated=TRUE))</wordasword>.
                The string <wordasword>myapp</wordasword> has to be replaced
                with the <wordasword>appid</wordasword>.
            </para>
            <para>
				The parameters for the LDAP server can be read from the environment variables:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_NAME</envar>
                    </term>
					<listitem>
						<simpara>
							The fully-qualified host name of the OpenLDAP
							server the app may connect to.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_PORT</envar>
                    </term>
					<listitem>
						<simpara>
							The port of the OpenLDAP server the app may
							connect to.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_ADDITION</envar>
                    </term>
					<listitem>
						<simpara>
							A list of alternative OpenLDAP servers. These
							values should be used for failover.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_BASE</envar>
                    </term>
					<listitem>
						<simpara>
							The base for the whole LDAP database, e.g.,
							<uri>dc=mydomain,dc=intranet</uri> or
							<uri>o=mydomain</uri>.
						</simpara>
					</listitem>
                </varlistentry>
            </variablelist>
				<important>
					<para>
						As a rule, the LDAP base should not be further
						restricted. Many environments store users below
						<uri>cn=users</uri> but this is not the case in all
						environments.
					</para>
				</important>

            <para>
				By default, the OpenLDAP server in UCS does not allow
				anonymous connections. For every app a user account is
				created. The account has read access to the LDAP directory.
				The username is passed as the environment variable
				<envar>LDAP_HOSTDN</envar>. The password is written in the
				file <filename>/etc/machine.secret</filename>. The
				credentials are not changed when an app is upgraded. But they
				change if an app is reinstalled.
            </para>
        </section>

        <section id="provisioning:push">
            <title>Automatically via IDM notifications (Push)</title>
            <para>
				An app can be notified by the IDM system when users or groups
				are created, modified or deleted. For each change, a file is
				created in a specific directory. The app can either poll the
				directory or register a command that is executed when a file
				is created.
            </para>
            <para>
                UCS 4.3 errata 211 is required on the user's system for this
                feature.
            </para>
			<section id="provision:push:setup">
				<title>Setup in App configuration</title>
				<para>
                    The configuration for these IDM notifications can be done
                    on the <guimenu>Identity management</guimenu> tab in the
                    <guimenu>Provisioning</guimenu> section in the App Provider
                    Portal. It can be configured which object types are
                    watched. Currently, users and groups are supported.
				</para>
				<para>
                    A script should be specified in the App Provider Portal.
                    The script is copied from the App Center into the Docker
                    container and executed in the context of the container
                    there. If a script is already part of the container, this
                    script can be called accordingly, e.g.
<programlisting language="sh">
#/bin/sh
/usr/sbin/app-connector
</programlisting>
            	</para>
			</section>
			<section id="provision:push:mechanism">
				<title>How the mechanism works</title>
				<para>
					The JSON files are created in the directory
					<filename class="directory">/var/lib/univention-appcenter/apps/$appid/data/listener/</filename>.
					As soon as any attribute of the watched object types is
					changed a JSON file is created in the directory. The script is
					called in a defined and configurable interval by the App
					Center, if at least one JSON file has been written.
					Once the script has finished a JSON file, the script must
					delete the JSON file.
				</para>
				<para>
					All files are JSON with one dictionary and the following content:
					<itemizedlist>
						<listitem>
							<simpara>
								<option>id</option>:
                                A unique identifier for the object holding the
                                value of <userinput>entry_uuid</userinput>
                                attribute of the LDAP object. It does not
                                change even if the object is moved. The script
                                certainly wants to identify objects by this
                                attribute.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>dn</option>:
								The distinguished name of the LDAP object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>type</option>:
								The type of the object, i.e., "users/user", or "groups/group".
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>attributes</option>:
								A dictionary of the attributes of this object. The
								content is defined by the UDM (Univention
								Directory Manager) representation of the object.
								If it is null instead, the object has been
								deleted.
							</simpara>
						</listitem>
                    </itemizedlist>
                    Logging information about the listener can found in
                    <filename>/var/log/univention/listener_modules/<replaceable>$appid</replaceable>.log</filename>.
				</para>
			</section>
			<section id="provision:push:script">
				<title>What should the script cover?</title>
            	<para>
					<itemizedlist>
						<listitem>
							<simpara>
							     The mechanism does not filter the data. Every
								 change will be saved in JSON files. If only a
								 subset of users, e.g. a certain user type
								 like students, shall be processed, the script
								 should filter on it and only continue with
								 the relevant data.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
                                UCS can re-synchronize a listener. In this
                                case, each and every object appears once again
                                as a JSON file. The script needs to cover the
                                case where no real modification to the object
                                has been made.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							The script has to exit with exit code = 0 on
								success and != 0 on failure.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							The script has to delete the JSON file that
								has already been processed. If the files are
								not deleted, the script should detect
								duplicates and make sure to handle the same
								change accordingly.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							If a mapping between the <option>id</option> of the
								JSON file and the primary user key in the
								solutions database is not possible, consider
								maintaining a mapping table by the script, if
								necessary. The <option>id</option> is the only
								attribute that remains the same for an
								object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							It may happen that the same <option>id</option> appears
								twice in the set of JSON files. This means
								that multiple modifications on the object have
								been made since the last time your script
								processed the object.
							</simpara>
						</listitem>
					</itemizedlist>
				</para>
			</section>
			<section id="provision:push:json">
				<title>JSON example</title>
            	<para>
					This is an example of a JSON file for a user change. It is
					not complete, but should clarify the idea.
                </para>
<programlisting language="js">
{
    "dn": "uid=Administrator,cn=users,dc=sparka-43,dc=intranet",
    "id": "b2f13544-e3cb-1037-810e-23ad4765aade",
    "object": {
        "description": "Built-in account for administering the computer/domain",
        "disabled": "0",
        "displayName": "Administrator",
        "gecos": "Administrator",
        "gidNumber": "5000",
        "groups": [
            "cn=Domain Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Domain Users,cn=groups,dc=sparka-43,dc=intranet",
            "cn=DC Backup Hosts,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Schema Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Enterprise Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Group Policy Creator Owners,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Administrators,cn=Builtin,dc=sparka-43,dc=intranet"
        ],
        "lastname": "Administrator",
        "locked": "0",
        "lockedTime": "0",
        "mailForwardCopyToSelf": "0",
        "mailPrimaryAddress": "admin@sparka-43.intranet",
        "mailUserQuota": "0",
        "password": "{crypt}$6$0kS4GowCZEAJRqWG$8LkK6iBeKFCInoxy9bCG1SFfGpajOy//Zg[...]",
        "passwordexpiry": null,
        "primaryGroup": "cn=Domain Admins,cn=groups,dc=sparka-43,dc=intranet",
        "sambaRID": "500",
        "shell": "/bin/bash",
        "uidNumber": "2002",
        "umcProperty": [
            [
                "appcenterDockerSeen",
                "true"
            ],
            [
                "appcenterSeen",
                "2"
            ],
            [
                "udmUserGridView",
                "default"
            ]
        ],
        "unixhome": "/home/Administrator",
        "unlockTime": "",
        "userexpiry": null,
        "username": "Administrator",
        "webweaverActivated": "TRUE"
    },
    "udm_object_type": "users/user"
}
</programlisting>
            </section>
        </section>
    </section>

    <section id="authentication">
        <title>Authentication</title>

        <para>
			There are different ways in which applications can authenticate
			against the UCS identity management system.
        </para>

        <section id="authentication:ldap">
            <title>LDAP</title>
            <para>
				UCS stores the user and group information in an OpenLDAP based
				directory. Thus, the default information can be accessed via
				the LDAP protocol. Objects are identified by an LDAP filter.
				The following filter can be used to search for users
				"<wordasword>(univentionObjectType=users/user)</wordasword>" and
				for groups the filter
				"<wordasword>(univentionObjectType=groups/group)</wordasword>"
				can be used.
            </para>
            <para>
                If the user activation is used (<guimenu>The administrator
                    needs to enable users for the app</guimenu>), the following
                LDAP filter can be used:
                "<wordasword>(&amp;(univentionObjectType=users/user)(myappActivated=TRUE))</wordasword>".
                The string <wordasword>myapp</wordasword> has to be replaced
                with the <wordasword>appid</wordasword>.
            </para>
            <para>
				The parameters for the LDAP server can be read from the
				environment variables:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_NAME</envar>
                    </term>
					<listitem>
						<simpara>
							The fully-qualified host name of the OpenLDAP
							server the app may connect to.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_PORT</envar>
                    </term>
					<listitem>
						<simpara>
							The port of the OpenLDAP server the app may connect to.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_SERVER_ADDITION</envar>
                    </term>
					<listitem>
						<simpara>
							A list of alternative OpenLDAP servers. These
							values should be used for failover.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <envar>LDAP_BASE</envar>
                    </term>
					<listitem>
						<simpara>
							The base for the whole LDAP database, e.g.,
							<uri>dc=mydomain,dc=intranet</uri> or
							<uri>o=mydomain</uri>.
						</simpara>
					</listitem>
                </varlistentry>
            </variablelist>
				<important>
					<para>
						As a rule, the LDAP basis should not be further
						restricted. Many environments store users below
						<uri>cn=users</uri> but this is not the case in all
						environments.
					</para>
				</important>

            <para>
				By default, the OpenLDAP server in UCS does not allow
				anonymous authentications. For every app a user account is
				created. The account has read access to the LDAP directory.
				The username is passed as the environment variable
				<envar>LDAP_HOSTDN</envar>. The password is written in the
				file <filename>/etc/machine.secret</filename>. The credentials
				are not changed when an app is upgraded. But they change if an
				app is reinstalled.
            </para>
        </section>
<!--
        <section id="authentication:saml">
            <title>SAML</title>
            <para>
            </para>
        </section>
-->
<!--
        <section id="authentication:openid-connect">
            <title>OpenID connect</title>
            <para>
            </para>
        </section>
-->
        <section id="authentication:kerberos">
            <title>Kerberos</title>
            <para>
				UCS integrates a Kerberos server by default. As usual with
				Kerberos, the data for the Kerberos configuration can be
				obtained from DNS. By default, the DNS domain name is
				passed through the <envar>DOMAINNAME</envar> environment
				variable. The following settings can then be queried via DNS:
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis>Kerberos Realm</emphasis>:
							It an be queried by the TXT record
							<systemitem class="domainname">_kerberos.DOMAINNAME</systemitem>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis>Kerberos KDC</emphasis>:
							It an be queried by the SRV records
							<systemitem class="domainname">_kerberos._tcp.DOMAINNAME</systemitem> and
							<systemitem class="domainname">_kerberos._udp.DOMAINNAME</systemitem>.
						</simpara>
					</listitem>
				</itemizedlist>
            </para>
        </section>
    </section>

    <section id="user-rights-management">
        <title>User rights management</title>
        <para>
            The flag <guimenu>The administrator needs to enable users for the
                app</guimenu> can be activated in the App Provider Portal on
            the <guimenu>Identity management</guimenu> tab in the <guimenu>User
                rights management</guimenu> section. This adds a checkbox to
            the user administration and a schema extension for the IDM is
            created, so that the status of the checkbox is stored in an
            attribute in the IDM. This allows each user to be activated or
            deactivated separately.
        </para>
        <para>
            If the app requires more settings in the IDM, an own LDAP schema
            can be uploaded into the App Provider Portal on the
            <guimenu>Identity management</guimenu> tab in the <guimenu>User
                rights management </guimenu> section in the field
            <guimenu>Schema extension for LDAP</guimenu>.
        </para>
        <para>
			In this case, it is also possible to create individual extended
            attributes during the setup process. This should be done in the
            join script.  Further information on extended attributes can be
            found in the <ulink
                url="https://docs.software-univention.de/developer-reference-4.4.html">Univention
                Developer Reference</ulink>.
        </para>
    </section>

</chapter>

<chapter id="app-configurations">
	<title>App configurations</title>
	<para>
		The App Center offers the possibility to add scripts at various
        points during the installation and configuration of the app. The
        scripts are described below. They can be edited in the app in the App
        Provider portal in the following sections:
	</para>
        <itemizedlist spacing="compact">
            <listitem>
                <simpara>
                    <guilabel>Scripts</guilabel> &ar; <guilabel>Join &amp; unjoin script</guilabel>
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    <guilabel>Scripts</guilabel> &ar; <guilabel>Scripts called before App Center action on apps</guilabel>
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    <guilabel>Scripts</guilabel> &ar; <guilabel>Scripts for data store and restore</guilabel>
                    <filename>store_data</filename>,
                    <filename>restore_data_before_setup</filename>,
                    <filename>restore_data_after_setup</filename>
                </simpara>
            </listitem>
            <listitem>
                <simpara><guilabel>Scripts</guilabel> &ar; <guilabel>Setup script</guilabel></simpara>
            </listitem>
            <listitem>
                <simpara>
                    <guilabel>Scripts</guilabel> &ar; <guilabel>Configure scripts</guilabel>. (<filename>configure</filename>)
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    <guilabel>Scripts</guilabel> &ar; <guilabel>Configure scripts</guilabel>. (<filename>configure_host</filename>)
                </simpara>
            </listitem>
        </itemizedlist>

	<section id="installation-scripts">
		<title>Installation scripts</title>
		<para>
            During the installation of an app, various scripts are called.
            Please see the overview below about of the involved scripts and the
            parameters they are called with. More information on the scripts
            themselves can be found in the following sections.
        </para>

			<figure id="installation-scripts:app-flow:install">
				<title>App workflow for installation</title>
				<graphic scalefit="1" width="100%" fileref="illustrations44/app-flow-install.png"/>
            </figure>

		<section id="installation:preinst">
			<title>Script called before installation to verify that App may be installed</title>
			<para>
                The <filename>preinst</filename> script is executed on the UCS
                host system before the app is initialized, even before the app
                image is downloaded. Its purpose is to check whether
                installation will be successful or not. Any exit code other
                than 0 will result in cancellation of the installation process.
                This script is also executed if the app is upgraded.
            </para>
            <para>
                The script receives the LDAP bind DN of the Administrator
                account and its password, the version of the app that should be
                installed, the locale and an error log file for log output as
                parameters. Error messages in the passed error log file will be
                passed to the UCS management system and thus to the
                administrator performing the installation. Proper error
                messages can thus be passed to the administrator.
            </para>
        </section>
        <section id="installation:restore-data-before-setup">
            <title>Docker script restore_data_before_setup</title>
            <para>
                The life cycle script
                <filename>restore_data_before_setup</filename> is executed
                inside the Docker container before the
                <filename>setup</filename> script is run. Its purpose is to
                restore the data which has been stored by the
                <filename>store_data</filename> script. The parameters are the
                <wordasword>appid</wordasword>, the app version and a filename
                for error logging.
            </para>
        </section>
		<section id="installation:setup">
			<title>Docker script setup</title>
			<para>
                The life cycle script <filename>setup</filename> is executed
                inside the Docker container. It is the heart of the
                initial app configuration and typically used to make
                environment specific settings to the container or apply certain
                changes that require the container environment. If the script
                fails (exit code != 0) the installation is aborted.
            </para>
            <para>
                The parameters given to the script are the
                <wordasword>appid</wordasword>, the app version, a filename for
                error logging and the username and credentials for the
                Administrator user.
            </para>
        </section>

		<section id="installation:restore_data_after_setup">
			<title>Docker script restore_data_after_setup</title>
			<para>
                The life cycle script
                <filename>restore_data_after_setup</filename> is executed
                inside the Docker container after the
                <filename>setup</filename> script is run. Its purpose is to
                restore the data which has been stored by the
                <filename>store_data</filename> script. The parameters are the
                <wordasword>appid</wordasword>, the app version and a filename
                for error logging.
			</para>
        </section>

        <section id="installation:configure_host">
            <title>Settings script run on Docker host</title>
            <para>
                The settings script <filename>configure_host</filename> is
                executed on the Docker host after the
                <filename>restore_data_after_setup</filename> script is run.
                Its purpose is to make environment specific settings on the UCS
                host regarding the app. The parameters are the app action
                <userinput>install</userinput>, the app version, a filename for
                error logging and the locale.
            </para>
        </section>

        <section id="installation:configure">
            <title>Settings script run in Docker container</title>
            <para>
                The settings script <filename>configure</filename> is executed
                inside the Docker container after the
                <filename>configure_host</filename> script. Its purpose is to
                make environment specific settings in the app container. The
                parameters are the app action <userinput>install</userinput>,
                the <wordasword>appid</wordasword>, the app version and a
                filename for error logging.
            </para>
        </section>

		<section id="installation:joinscript">
			<title>Join script</title>
			<para>
                The joinscript <filename>inst</filename> is executed on the UCS
                host system after the Docker container is configured. Please
                refer to the <ulink
                    url="https://docs.software-univention.de/developer-reference-4.4.html#chap:join">Developer
                    Reference</ulink> about how to write a join script. In
                principle a join script is a script that runs after the
                installation of an app and it has write access to the LDAP
                directory service. If it runs successfully, the join script may
                save this information in a status file. If this does not
                happen, the user is constantly reminded to re-run the join
                script. So the join script does not need to run successfully.
                The installation will not be aborted at this point. But of
                course at some point it should run through successfully.
            </para>

            <section id="installation:joinscript:helper">
                <title>Join script helper</title>

                <para>
                    Apart from the functions documented in the Developer Reference,
                    the below listed functions are available in join scripts for
                    dealing with apps. They require the following line in the
                    script:
                    <programlisting language="sh">
. /usr/share/univention-appcenter/joinscripthelper.sh
                    </programlisting>
                    Furthermore, this call provides access to the following variables:
                </para>
                <variablelist>
                    <varlistentry>
                        <term>
                            <envar>$APP</envar>
                        </term>
                        <listitem>
                            <simpara>app id</simpara>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <envar>$APP_VERSION</envar>
                        </term>
                        <listitem>
                            <simpara>app version</simpara>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <envar>$SERVICE</envar>
                        </term>
                        <listitem>
                            <simpara>app name</simpara>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
                            <envar>$CONTAINER</envar>
                        </term>
                        <listitem>
                            <simpara>Docker container id</simpara>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="installation:joinscript:functions">
                <title>Join script functions</title>
                <para>
                    <function>joinscript_add_simple_app_system_user</function>
                    adds a domain wide user to the LDAP directory that is
                    not a real Domain User and offers an authentication
                    account. It can be used as bind user for the app to
                    connect to the LDAP directory. The password will be
                    stored on the Docker Host at
                    <filename>/etc/$APP.secret</filename>. The DN will be
                    <option>uid=$APP-systemuser,cn=users,$ldap_base</option>.
                    <programlisting language="sh">
joinscript_add_simple_app_system_user "$@" --set mailPrimaryAddress=...
                   </programlisting>
               </para>
               <para>
                   <function>joinscript_container_is_running</function>
                   returns whether or not the Docker container is
                   currently running. 0: Yes, 1: No. Can be used in an if
                   statement.
                   <programlisting language="sh">
joinscript_container_is_running || die "Container is not running"
                   </programlisting>
               </para>
               <para>
                   <function>joinscript_run_in_container</function> runs
                   one command inside the container. Returns the return
                   code of the command.
                   <programlisting language="sh">
joinscript_run_in_container service myapp restart ||
	die "Could not restart the service"
                   </programlisting>
               </para>
               <para>
                   <function>joinscript_container_file</function> prints the
                   absolute path for the Docker host for the filename given inside
                   the container.
                   <programlisting language="sh">
FILENAME="$(joinscript_container_file "/opt/$APP/my.cnf")"
                   </programlisting>
               </para>
               <para>
                   <function>joinscript_container_file_touch</function>
                   creates a file inside the container. Directories are
                   created along the way. Prints the resulting filename
                   just like "joinscript_container_file".
               </para>
               <para>
                   <function>joinscript_register_schema</function>
                   registers a LDAP schema file semi automatically. The
                   schema file allows to extend LDAP objects with new
                   attributes. The file will be copied to the Docker
                   host's
                   <filename>/usr/share/univention-appcenter/apps/<replaceable>APPID</replaceable>/<replaceable>APPID</replaceable>.schema</filename>
                   during installation. See the <ulink
                       url="http://www.openldap.org/doc/admin24/schema.html">LDAP
                       documentation</ulink> for the syntax of a schema file. If an
                   official object identifier (OID) namespace is needed, Univention
                   can provide one. It is important to note that shipping the
                   schema file alone is not enough. It has to be registered with
                   the mentioned function in the join script. The schema file
                   content can be provided in the App Provider portal on the
                   <guimenu>Identity management</guimenu> tab in the
                   <guimenu>User rights management</guimenu> section, in the
                   field for <guimenu>Schema extension for LDAP</guimenu>.
                   <programlisting language="sh">
joinscript_register_schema "$@"
                   </programlisting>
               </para>
           </section>

           <section id="installation:joinscript:boilerplate">
               <title>Join script boilerplate</title>
               <para>
                   The following boilerplate can be used as a starting point
                   for the app's own join script.
                   <programlisting language="sh">
#!/bin/bash
VERSION=1

. /usr/share/univention-appcenter/joinscripthelper.sh
joinscript_init
eval "$(univention-config-registry shell)"
ucs_addServiceToLocalhost "$SERVICE" "$@"

... # Place for the app's join script code

joinscript_save_current_version
exit 0
                   </programlisting>
               </para>
           </section>
		</section>
	</section>
	<section id="uninstallation-scripts">
		<title>Uninstallation scripts</title>
		<para>
            During the uninstallation of an app, various scripts are called.
            Please see the overview below about the involved scripts and the
            parameters they are called with. More information on the scripts
            themselves can be found in the following sections.
        </para>

			<figure id="uninstallation-scripts:app-flow:remove">
				<title>App workflow for Removal</title>
				<graphic scalefit="1" width="100%" fileref="illustrations44/app-flow-remove.png"/>
            </figure>

		<section id="uninstallation:prerm">
			<title>Script called before uninstalling to verify that App may be removed</title>
			<para>
                The <filename>prerm</filename> script is executed on the UCS
                host system. Its purpose is to check the prerequisites for an
                uninstallation and abort if they are not met. For example, the
                prerm may fail if other software still depends on it. Any exit
                code other than 0 will result in cancellation of the
                uninstallation process. The given parameters are the LDAP bind
                DN of the Administrator account and its password, the version
                of the app that should be uninstalled/removed, the locale and
                an error log file for log output. Error messages in the passed
                error log file will be passed to the UCS management system and
                thus to the administrator performing the installation. Proper
                error messages can thus be passed to the administrator.
			</para>
        </section>

        <section id="uninstallation:configure_host">
            <title>Settings script run on Docker host</title>

            <para>
                The settings script <filename>configure_host</filename> is
                executed on the Docker host after the
                <filename>prerm</filename> script is run. Its purpose is to
                make environment specific settings on the UCS host during the
                removal of the app. The parameters are the app action
                <userinput>remove</userinput>, the app version, a filename for
                error logging and the locale.
            </para>
        </section>

        <section id="uninstallation:configure">
            <title>Settings script run in Docker container</title>
            <para>
                The settings script <filename>configure</filename> is
                executed inside the Docker container after the
                <filename>configure_host</filename> script. Its purpose is to
                make environment specific settings in the app container before
                it is removed. The parameters are the app action
                <userinput>remove</userinput>, the
                <wordasword>appid</wordasword>, the app version and a filename
                for error logging.
            </para>
        </section>

        <section id="uninstallation:store-data">
            <title>Docker script store_data</title>

			<para>
                The life cycle script <filename>store_data</filename> is
                required if data exists in the container which should not be
                removed when the container is replaced with a new container or
                if the app is uninstalled. The script is not required if all
                the data is stored outside of the container for example in a
                database or a mapped volume. It is executed inside the Docker
                container and it should copy the relevant data to
                <filename>/var/lib/univention-appcenter/apps/<replaceable>$APPID</replaceable>/data/</filename>.
                Afterwards, the data can be restored by one of the
                <filename>restore_data*</filename> scripts. The parameters are
                the <wordasword>appid</wordasword>, the app version and a
                filename for error logging.
			</para>
        </section>

		<section id="uninstallation:unjoin">
			<title>Unjoin script</title>
			<para>
                The unjoin script <filename>uinst</filename> is executed on the
                UCS host system after the Docker container is removed. See the
                <ulink
                    url="https://docs.software-univention.de/developer-reference-4.4.html">Developer
                    Reference</ulink> for how to write an unjoin script. It
                should revert most (if not all) changes done in the join
                script. With the notable exception of schema registration. An
                LDAP schema extension should never be removed once it was
                registered.
			</para>
		</section>
	</section>

	<section id="upgrade-scripts">
		<title>Upgrade scripts</title>
		<para>
            It may be necessary to move data from the old container to the new
            container when the app container is replaced during an upgrade or
            when the app is uninstalled. The upgrade scripts can be used for
            this purpose. Please see an overview of the involved scripts and
            the parameters they are called with in the figure below. More
            information on the scripts themselves can be found in the following
            sections.
        </para>

			<figure id="upgrade-scripts:app-flow:update">
				<title>App workflow for upgrade</title>
				<graphic scalefit="1" width="100%" fileref="illustrations44/app-flow-update.png"/>
            </figure>

		<section id="upgrade-scripts:preinst">
			<title>Script called before upgrade to verify that App may be upgraded</title>
			<para>
                The <filename>preinst</filename> script is executed on the UCS
                host system before the app upgrade is initialized, even before
                the Docker image is downloaded. Its purpose is to check whether
                the requirements for the upgrade are fulfilled. Any exit code
                other than 0 will result in cancellation of the upgrade
                process.
            </para>
            <para>
                The script receives the LDAP bind DN of the Administrator
                account and its password, the old version of the app and the
                new version, the locale and an error log file for log output as
                parameters. Error messages in the passed error log file will be
                passed to the UCS management system and thus to the
                administrator performing the installation. Proper error
                messages can thus be passed to the administrator.
            </para>
        </section>

		<section id="upgrade:store_data">
			<title>Docker script store_data</title>
			<para>
                The life cycle script <filename>store_data</filename> is
                required if data exists in the container which should not be
                removed when it is replaced with a new container or if the app
                is uninstalled. It is not required if all the data is stored
                outside the container for example in a database or a mapped
                volume. The script is executed inside the Docker container and
                it should copy the relevant data to
                <filename>/var/lib/univention-appcenter/apps/<replaceable>$APPID</replaceable>/data/</filename>.
                Afterwards, the data can be restored by one of the
                <filename>restore_data*</filename> scripts when they are
                executed in the new container.
			</para>
		</section>
		<section id="upgrade:restore_data_before_setup">
			<title>Docker script restore_data_before_setup</title>
			<para>
                The life cycle script
                <filename>restore_data_before_setup</filename> is executed
                inside the Docker container before the
                <filename>setup</filename> script is run. Its purpose is to
                restore the data which has been stored by the
                <filename>store_data</filename> script.
			</para>
        </section>

        <section id="upgrade:setup">
            <title>Docker script setup</title>

			<para>
                The life cycle script <filename>setup</filename> is executed
                inside the Docker container. It is used to make environment
                specific settings to the new container or apply certain changes
                that require the container environment. If the script fails
                (exit code != 0) the upgrade is aborted.
            </para>
            <para>
                The parameters given to the script are the
                <wordasword>appid</wordasword>, the app version, a filename for
                error logging and the username and credentials for the
                Administrator user.
            </para>
        </section>

		<section id="upgrade:restore_data_after_setup">
			<title>Docker script restore_data_after_setup</title>
			<para>
                The life cycle script
                <filename>restore_data_after_setup</filename> is executed
                inside the Docker container after the
                <filename>setup</filename> script is run. Its purpose is to
                restore the data which has been stored by the
                <filename>store_data</filename> script in the old container.
			</para>
        </section>

        <section id="upgrade:configure_host">
            <title>Settings script run on Docker host</title>
            <para>
                The settings script <filename>configure_host</filename> is
                executed on the Docker host after the
                <filename>restore_data_after_setup</filename> script is run.
                Its purpose is to make environment specific settings on the UCS
                host regarding the app during the upgrade. The parameters are
                the app action <userinput>upgrade</userinput>, the app version,
                a filename for error logging and the locale.
            </para>
        </section>

        <section id="upgrade:configure">
            <title>Settings script run in Docker container</title>
            <para>
                The settings script <filename>configure</filename> is executed
                inside the Docker container after the
                <filename>configure_host</filename> script is run. Its purpose
                is to make environment specific settings in the app container
                during the upgrade. The parameters are the app action
                <userinput>upgrade</userinput>, the
                <wordasword>appid</wordasword>, the app version and a filename
                for error logging.
            </para>
        </section>

        <section id="upgrade:joinscript">
            <title>Join Script</title>
            <para>
                Finally, the join script <filename>inst</filename> is called to
                end the upgrade. With an updated join script changes can be
                made to the environment that require the necessary execution
                permissions or access to the UCS directory service. When a join
                script should run during the upgrade, please keep in mind to
                increment the <userinput>VERSION</userinput> counter. For more
                information on the join script in general see <xref
                    linkend="installation:joinscript" />.
            </para>
        </section>

	</section>

	<section id="app-settings">
		<title>App settings</title>
		<para>
			The App settings allow the user to configure the app during its
			runtime. The App Provider Portal can be used to define which settings
			are displayed to the user. The app can react accordingly to the
			changes.
		</para>
		<para>
			If App settings are defined for an app, the user can reach these
			settings in the app configuration, see <xref linkend="app-configurations:app-settings:button" />).
			<figure id="app-configurations:app-settings:button">
				<title>App settings button</title>
				<graphic scalefit="1" width="80%" fileref="illustrations44/Appcenter-settings-button.png"/>
			</figure>
			An example for an App settings dialog is in <xref linkend="app-configurations:app-settings:example" />).
			<figure id="app-configurations:app-settings:example">
				<title>App settings example</title>
				<graphic scalefit="1" width="80%" fileref="illustrations44/Appcenter-settings-example.png"/>
			</figure>
		</para>
		<para>
            The App settings can be defined on the tab
            <guimenu>Advanced</guimenu> in the section <guimenu>App
                settings</guimenu> in the App Provider Portal.
		</para>
		<section id="app-settings:scripts">
			<title>React on App settings</title>
			<para>
				The settings are saved inside the Docker container in the file
				<filename>/etc/univention/base.conf</filename> in the format
				<wordasword>key: value</wordasword>.
				After the settings are changed, two scripts are executed.
				First, the script <filename>configure_host</filename>. This script is run on the
				Docker host.
				Second, the script <filename>configure</filename> is
				executed. It is executed inside the Docker container. In the
				App Provider Portal, the path of the script can be given
				(<guimenu>Configure scripts</guimenu>) or the script code can be uploaded
				(<guimenu>Path to script inside the container
				(absolute)</guimenu>).
			</para>
		</section>
		<section id="app-settings:reference">
			<title>App settings configuration</title>
			<para>
				The App settings are defined in the ini format. The definition
				can be done in the field <guimenu>Settings that can be used to
				configure the app. ini file format</guimenu>. One ini file can
				contain several settings.
			</para>
			<para>
				The name of a setting is the name of the section in the ini
				file, for example
				<programlisting language="ini">
[myapp/mysetting]
				</programlisting>
				It is recommended to use the app ID as a prefix to prevent
				collisions.
			</para>
			<para>
				The type of the attribute is defined with the keyword
				<emphasis>Type</emphasis>. The following types are
				supported:
			</para>
            <variablelist>
                <varlistentry>
                    <term>
                        <guimenu>String</guimenu>
                    </term>
					<listitem>
						<simpara>
							A standard input field
							with no restrictions. This is used by default.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>Int</guimenu>
                    </term>
					<listitem>
						<simpara>
							A number field which is
							validated accordingly.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>Bool</guimenu>
                    </term>
					<listitem>
						<simpara>
							A checkbox. The value
							<option>true</option> or <option>false</option> is
							set.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>List</guimenu>
                    </term>
					<listitem>
						<simpara>
							A widget that lets the
							user choose from a predefined set of values.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>Password</guimenu>
                    </term>
					<listitem>
						<simpara>
							A password input.
						</simpara>
                        <note>
                            <simpara>
							The content will be stored as clear text
							value inside the Docker container.
                            </simpara>
                        </note>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>File</guimenu>
                    </term>
					<listitem>
						<simpara>
							An upload widget. The
							content is stored directly in a file according to
							the definition of the setting.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>PasswordFile</guimenu>
                    </term>
					<listitem>
						<simpara>
							As a File, but
							shown as a password input.
						</simpara>
					</listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <guimenu>Status</guimenu>
                    </term>
					<listitem>
						<simpara>
							A read-only settings
							that is actually meant as a feedback channel for
							the user. This does not render a widget, but
							instead just writes a text with whatever was
							written into this variable. Writing to it is up to
							the App Provider (e.g., by using the configure
							script).
						</simpara>
					</listitem>
                </varlistentry>
            </variablelist>
			<para>
				The attribute <guimenu>Description</guimenu> is used to
				define the description of the setting. It is shown next to the
				widget so that the user knows what to do with this form.
				It can be localized by also defining
				<guimenu>Description[de]</guimenu> and so on.
			</para>
			<para>
				The attribute <guimenu>Group</guimenu> can be used to group
				settings. All settings sharing one group will be put under
				that label. The default group is <option>Settings</option>. It
				is also possible to localize it for example
				<guimenu>Group[de]</guimenu>.
			</para>
			<para>
				The attribute <guimenu>Show</guimenu> can be used to define
				when the setting should be shown. By default the setting
				attribute is shown when the app is up and running. It is also
				possible to show the setting attribute during the
				installation. The following values are possible
				<option>Install</option>, <option>Upgrade</option>,
				<option>Remove</option> and <option>Settings</option>. It is possible
				to specify more than one value which must be separated by
				comma.
			</para>
			<para>
				The attribute <guimenu>ShowReadOnly</guimenu> can be used in
				the same way as <guimenu>Show</guimenu>. The difference is
				that the value is not changeable.
			</para>
			<para>
				The attribute <guimenu>InitialValue</guimenu> can be used
				during the installation. If no value for this attribute was
				given during the installation, the defined value is set.
			</para>
			<para>
				The attribute <guimenu>Required</guimenu> can be used to
				define if this setting has to be set or not.
			</para>
			<para>
				The attribute <guimenu>Scope</guimenu> is used to specify if the value is set inside the Docker container (<option>inside</option>), on the Docker host (<option>outside</option>) or on both (<option>inside, outside</option>).
				The default is <option>inside</option>.
				Values in the scope <option>inside</option> can be referenced in the <filename>docker-compose.yml</filename> for multi container apps just like &ucsUCRV;s (see <xref linkend="create-app-with-docker:compose-postprocessing" /> for an example).
			</para>
			<para>
				The attributes <guimenu>Labels</guimenu> and
				<guimenu>Values</guimenu> are used if a type List is
				defined. The attribute <guimenu>Labels</guimenu> defines the
				values shown to the user and the attribute
				<guimenu>Values</guimenu> defines the values which are
				stored.
				The lists are comma separated and should have the same size.
				If a comma is necessary inside a label or value, it can be
				escaped with a \.
			</para>
			<para>
				The attribute <guimenu>Filename</guimenu> can be used to
				define the absolute path where the file should be stored.
				This attribute is needed in case the types <guimenu>File</guimenu> or
				<guimenu>PasswordFile</guimenu> are used.
			</para>
		</section>
		<section id="app-settings:examples">
			<title>App settings examples</title>
			<para>
				This is a minimal settings definition:
				<programlisting language="ini">
[myapp/mysetting]
Type = String
Description = This is the description of the setting
Description[de] = Das ist die Beschreibung der Einstellung
				</programlisting>
			</para>
			<para>
				These are two more advanced settings
				<programlisting language="ini">
[myapp/myfile]
Type = File
Filename = /opt/myapp/license
Description = License for the App
Description[de] = Lizenz der App
Show = Install, Settings
Group = License and List
Group[de] = Lizenz und Liste
				</programlisting>

				<programlisting language="ini">
[myapp/list]
Type = List
Description = List of values
Show = Install
ShowReadOnly = Settings
Values = value1, value2, value3
Labels = Label 1, Label 2, Label 3
InitialValue = value2
Scope = inside, outside
Group = License and List
Group[de] = Lizenz und Liste
				</programlisting>
				The first of these two settings will upload a file to
				<filename>/opt/myapp/license</filename> inside the container. The second will save
				<wordasword>myapp/list: value2</wordasword> (or another value)
				inside the container and on the Docker host. Both settings
				will be shown before the installation. On the App settings
				page, the list setting will be read-only.
			</para>
		</section>
	</section>

    <section id="certificates">
        <title>Certificates</title>
        <para>
            UCS provides a certificate infrastructure for secure communication
            protocols. See <ulink
                url="https://docs.software-univention.de/manual-4.4.html#domain:ssl">SSL
                certificate management</ulink> in the UCS manual.
        </para>
        <para>
            Apps may need access to the UCS certificate infrastructure or need
            to be aware of changes to the certificates. Starting with <ulink
                url="https://errata.software-univention.de/ucs/4.3/91.html">UCS
                4.3-0 errata 91</ulink> the Univention App Center provides a
            simple way to manage certificates inside an app. The script
            <guimenu>update-certificates</guimenu> is executed on the UCS host
            automatically during the installation and upgrade of apps (but can
            also be executed manually) and provides apps a simple way to gain
            access to certificates and to react to changes to certificates.
        </para>
<programlisting language="sh">
# update all apps
univention-app update-certificates

# update app "my-app"
univention-app update-certificates my-app
</programlisting>

        <para>
            What happens with update-certificates?
            <itemizedlist>
                <listitem>
                    <simpara>
                        The UCS root CA certificate is copied to <filename>/usr/local/share/ca-certificates/ucs.crt</filename> inside the container.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <guimenu>update-ca-certificates</guimenu> is executed in the Docker container, if it exists, to update the CA certificate list.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The UCS root CA certificate is copied to <filename>/etc/univention/ssl/ucsCA/CAcert.pem</filename> inside the container.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The Docker host UCS certificate is copied to <filename>/etc/univention/ssl/docker-host-certificate/{cert.perm,private.key}</filename> and <filename>/etc/univention/ssl/$FQDN_DOCKER_HOST/{cert.perm,private.key}</filename>.
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Every app can define a <guimenu>update_certificates</guimenu>
            script. In the app provider portal it can be added on the tab
            <guimenu>Advanced</guimenu> in the section
            <guimenu>Certificates</guimenu>.
        </para>
        <para>
            Example:
<programlisting language="sh">
#!/bin/bash
# cat the UCS root CA to the app's root CA chain
cat /etc/univention/ssl/ucsCA/CAcert.pem >> /opt/my-app/ca-bundle.crt
service my-app-daemon restart
</programlisting>
        </para>
        <para>
            The script has to be uploaded via the upload API (section <xref
                linkend="upload-interface" />). The script should be written
            locally and then uploaded with the following command:
<programlisting>
./univention-appcenter-control upload --username $your-username 4.4/myapp=1.0 update_certificates
</programlisting>
        </para>

    </section>

<!--
	TODO:
	I haven't documented https://wiki.univention.de/index.php/Integration_with_UCS/Attributes.
	We should decide how to proceed with this.
-->
<!--
	<section id="app-attributes">
	    <title>App attributes</title>
	    <para>
	    </para>
	</section>
-->

    <section id="mail-integration">
        <title>Mail integration</title>
        <para>
            Univention Corporate Server (UCS) provides a complete mailstack
            with the <guimenu>Mailstack</guimenu> app in the App Center. It
            includes Postfix as <wordasword>MTA</wordasword> for SMTP and
            Dovecot for IMAP. If the app relies on an existing mail
            infrastructure, it is one option to use the mailstack app and
            require its installation in the UCS domain. This can be configured
            for the app in the App Provider portal on the
            <guimenu>Version</guimenu> tab in the section <guimenu>Required
                apps</guimenu> by adding the
            <application>Mailserver</application> app and
            setting <userinput>Installed in domain</userinput>. With this
            configuration the App Center on the system administrator's UCS
            system will check, if the <wordasword>Mailserver</wordasword> app
            is installed somewhere in the domain and asks the administrator to
            install it accordingly.
        </para>
        <para>
            Next the app needs to be configured to use the UCS SMTP and IMAP
            servers. This is done in the Join Script (see <xref linkend="installation:joinscript" />).
            The following snippet gives an example what should be included in
            the Join Script:
            <programlisting language="sh">
...
eval "$(univention-config-registry shell)"
...
# use the first IMAP server as smtp and imap server
mailserver="$(univention-ldapsearch -LLL '(univentionService=IMA)' cn |
	sed -ne 's/^cn: "//p;T;q')"
if [ -n "$mailserver" ]; then
  mailserver="$mailserver.$domainname"

  # for Docker Apps the helper script joinscript_run_in_container
  # can be used to run commands in the container
  . /usr/share/univention-appcenter/joinscripthelper.sh
  joinscript_run_in_container my-app-setup --config imap="$mailserver"
  joinscript_run_in_container my-app-setup --config smtp="$mailserver"
  joinscript_run_in_container my-app-setup --config sieve="$mailserver"
fi
...
            </programlisting>
            The snipped searches the UCS LDAP directory for the host with the
            service IMAP and sets the FQDN of this host as IMAP, SMTP and SIEVE
            server for the app. This is a good default and may not be correct
            for some setups.
        </para>
        <para>
            The best practice mail settings when the UCS mailstack is used, are the following.
        </para>
        <para>
            IMAP:
            <itemizedlist>
                <listitem>
                    <simpara>
                        TLS
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Port 143
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Authentication is possible for domain users with a primary mail address.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The user's uid or the primary mail address are both valid for authentication.
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            SMTP:
            <itemizedlist>
                <listitem>
                    <simpara>
                        TLS
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Port 587 (submission) for authentication
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Mechanism Login or Mechanism Plain
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>
        <section id="mail-integration:with-docker-apps">
            <title>Provide mail with Docker Apps</title>
            <para>
                For the intended app it may be necessary to provide SMTP and
                IMAP with a custom setup for the app. To provide SMTP and/or
                IMAP services in a Docker app, these services have to be
                stopped on the Docker host. This can be done in the app's
                preinst Docker script, see <xref linkend="installation:preinst"
                    />. Example:
                <programlisting language="sh"><![CDATA[
#!/bin/bash

# stop imap/smtp on docker host
test -e /etc/init.d/postfix && service postfix stop
test -e /etc/init.d/dovecot && service dovecot stop
ucr set postfix/autostart='no'
ucr set dovecot/autostart='no'
                ]]></programlisting>
                To map SMTP and/or IMAP ports from the container to the host to
                be able to use the Docker host as IMAP/SMTP server exclusive
                ports for the container have to be set to the relevant ports
                (e.g. 110, 143, 993, 995, 587, 25, 465, 4190 for <systemitem class="service">pop3(s)</systemitem>,
                <systemitem class="service">imap(s)</systemitem>, <systemitem class="service">smtp(s)</systemitem>, <systemitem class="service">submission</systemitem> and <systemitem class="service">sieve</systemitem>). See section <xref
                    linkend="create-app-with-docker:ports" /> on how to set an
                exclusive port.
            </para>
            <para>
                Firewall exceptions for these ports are create automatically.
            </para>
            <para>
                Best practice is to at least map the IMAP data store to the
                Docker host to provide a separation of data and container
                (important for migration to Docker and Docker image updates).
                See section <xref linkend="create-app-with-docker:volumes" />.
            </para>
        </section>

        <section id="mail-integration:local-mail-docker-host">
            <title>Use local mail on Docker host</title>
            <para>
                With a stopped Postfix on the Docker host, mail can no longer
                be delivered locally. If that is a problem, the following setup
                can help.
            </para>

            <para>
                Install the <phrase>extremely simple MTA</phrase>
                <package>ssmtp</package> and configure this
                MTA to use the <systemitem
                    class="systemname">localhost</systemitem> (our Docker
                container is listening on
                localhost:25).
                <programlisting language="sh">
univention-install --yes ssmtp
# add mailhub=localhost:25 in to /etc/ssmtp/ssmtp.conf
                </programlisting>
            </para>
            <para>
                Now configure Postfix in the Docker container to deliver mails
                from the Docker host locally by adding the FQDN of the Docker
                host to <envar>mydestination</envar>:
                <programlisting language="sh">
ucr set mail/postfix/mydestination="\$myhostname, localhost.\$mydomain, localhost, $DOCKER_HOST_NAME"
                </programlisting>
            </para>
        </section>
    </section>

    <section id="subdomains">
			<title>Subdomains / dedicated FQDN for an App</title>
        <para>
					There may be reasons why an App needs to have its own FQDN within the
					UCS domain. Some Apps may not be able to configure a web interface
					that integrates well into the default Apache sites of UCS (see <xref
						linkend="create-app-with-docker:web-interface" />).
        </para>
        <para>
					To avoid naming collisions, the App's FQDN should reference the Docker Host's FQDN,
					e.g, <literal>myapp.ucs-master.domain.tld</literal>.
					UCS can do the following to allow this scenario to work as smooth as possible:
            <itemizedlist>
                <listitem>
                    <simpara>
											Add a dedicated FQDN for the App and make it known to the internal DNS. That means that the new FQDN is an alias for the actual FQDN of the Docker host.
                    </simpara>
								</listitem>
                <listitem>
                    <simpara>
											Generate a certificate for this FQDN. Technically, a wildcard certificate is created.
                    </simpara>
								</listitem>
                <listitem>
                    <simpara>
											Generate a virtual host for Apache with that new FQDN. Thus, requests to that FQDN will be handled by the <wordasword>VHost</wordasword>. The skeleton configuration can be easily extended by writing a configuration file that is then included in the <wordasword>VHost</wordasword> entry.
                    </simpara>
                </listitem>
							</itemizedlist>
        </para>
        <para>
					For this to work, this snippet can be used in the join script (<xref linkend="installation:joinscript" />):
                <programlisting language="sh"><![CDATA[
univention-add-vhost "myapp.$(ucr get hostname).$(ucr get domainname)" 443 --conffile /var/lib/univention-appcenter/apps/myapp/data/apache.conf "$@"  # "$@" is used to pass credentials
# write the apache.conf, maybe by using the App Settings
service apache2 reload
nscd -i hosts  # only needed if the new fqdn should be used immediately by the system
service bind9 reload  # same here
							]]></programlisting>
        </para>
        <para>
					This will create the following entry in <filename>/etc/apache2/sites-available/univention-vhosts.conf</filename>
                <programlisting language="sh"><![CDATA[
# Virtual Host for myapp.ucs-master.domain.tld/443
<IfModule mod_ssl.c>
<VirtualHost *:443>
	ServerName myapp.ucs-master.domain.tld
	IncludeOptional /var/lib/univention-appcenter/apps/myapp/data/apache.con[f]
	SSLEngine on
	SSLProxyEngine on
	SSLProxyCheckPeerCN off
	SSLProxyCheckPeerName off
	SSLProxyCheckPeerExpire off

	SSLCertificateFile /etc/univention/ssl/*.ucs-master.domain.tld/cert.pem
	SSLCertificateKeyFile /etc/univention/ssl/*.ucs-master.domain.tld/private.key
	SSLCACertificateFile /etc/univention/ssl/ucsCA/CAcert.pem
</VirtualHost>
</IfModule>
							]]></programlisting>

        </para>
				<note>
					<para>
						Although this seems convenient for some Apps, this feature creates an <emphasis>internal</emphasis> name. It may still be inconvenient for testers that run UCS in a virtual environment where their browser is not part of UCS' DNS.
					</para>
				</note>
        <warning>
					<para>
						This method may not work in the "AD member mode". There, a Windows Domaincontroller is the leading system and provides the DNS. The DNS alias has to be added by the Admin manually there as our script cannot add it for them.
					</para>
        </warning>
    </section>

    <section id="firewall">
        <title>Firewall</title>
        <para>
            This section describes how the local Univention Firewall based on
            iptables is changed by apps and how it can be customized. Docker
            containers have access to the Docker host. And the Docker containers
            can be made available for external clients with <guimenu>Ports
                redirection</guimenu> settings (see <xref
                linkend="create-app-with-docker:ports" />).
        </para>
        <para>
            If MySQL/MariaDB or PostgreSQL are used as database, those ports
            will be opened automatically for the Docker container (section
            <xref linkend="create-app-with-docker:database" />).
        </para>
        <para>
            Every app can provide additional custom rules to open required
            ports. This can be done in the join script (section <xref
                linkend="installation:joinscript" />). In the example the port
            6644 is opened for TCP and UDP:
            <programlisting>
univention-config-registry set \
	security/packetfilter/package/"$APP"/tcp/6644/all="ACCEPT" \
	security/packetfilter/package/"$APP"/tcp/6644/all/en="$APP" \
	security/packetfilter/package/"$APP"/udp/6644/all="ACCEPT" \
    security/packetfilter/package/"$APP"/udp/6644/all/en="$APP"

if [ -x "/etc/init.d/univention-firewall" ]; then
    service univention-firewall restart
fi
            </programlisting>
        </para>
        <para>
            Please also add corresponding <userinput>ucr unset</userinput>
            commands in the unjoin script so that the firewall rules will be
            removed when the app is removed from the system (section <xref
                linkend="uninstallation:unjoin" />).
        </para>
    </section>
</chapter>


<chapter id="app-appliances">
    <title>App Appliances</title>

    <para>
        App Appliances are pre-defined images which consist of the App, the UCS
        management system and the UCS runtime environment. They are run as a
        virtual machine within a hypervisor and are currently provided as
        VMware, VMware ESXi, VirtualBox and KVM images. By default the UCS
        branding is used, but it is possible and recommended to use a custom
        branding.
    </para>

    <section id="app-appliances:create">
        <title>Create an app appliance</title>
        <para>
            To create an appliance, select an app version that has already been
            published and activate the <guimenu>Create App appliance</guimenu>
            checkbox on the <guimenu>Appliance</guimenu> tab. If the solution
            needs a minimum size of memory, please specify the needed mega
            bytes.
        </para>

        <section id="appliance:additional-software">
            <title>Additional software</title>
            <para>
                If the appliance should include additional apps, please specify
                them in the <guimenu>Additional software</guimenu> section.
            </para>
        </section>

        <section id="appliance:customize-setup-wizard">
            <title>Customize setup wizard in appliance</title>
            <para>
                The appliance allows customization of the UCS setup wizard and
                controls which setup pages and setup fields should be hidden. For
                simplicity towards the user, it is recommended to hide the
                <userinput>software</userinput> page and the
                <userinput>basesystem</userinput> setup field.
            </para>
        </section>

        <section id="appliance:customize-app-center">
            <title>Customize app listing in App Center</title>
            <para>
                The listing of apps in the App Center UMC module in the
                appliance can be customized to either whitelist or blacklist
                certain apps. For example, if the solution is a groupware,
                other groupware solutions can be hidden from the overview
                listing. System administrators can only install the whitelisted
                apps or are not allowed to install the black listed apps.
            </para>
        </section>

        <section id="appliance:first-steps">
            <title>First steps information</title>
            <para>
                The appliances are usually configured in such a way that the user
                can start using them right away. In some cases it may be
                necessary to provide some information for the first steps. For
                example, the user needs to know that a user object has to be
                created and activated for the app first. This could be briefly
                described in this section. The German translation should be
                kept in mind and provided.
            </para>
        </section>

        <section id="appliance:umc-favorites">
            <title>Customize UMC favorite category</title>
            <para>
                The appliance also allows to customize the UMC modules which
                should be pre-configured for the favorites section in the UCS
                management system. The favorites section comes up first, after
                a UCS system administrator logs onto the UCS management system.
                It is recommended to have the modules
                <userinput>Users</userinput>, <userinput>Groups</userinput> and
                <userinput>App Center</userinput> listed here.
            </para>
        </section>

        <section id="appliance:build">
            <title>Appliance build</title>
            <para>
                As soon as the settings are made, <guimenu>Save</guimenu>,
                click the <guimenu>Approve for release</guimenu> button and
                provide a custom message to let the Univention team know that
                an appliance is ready to be build. This will create a ticket
                which helps to keep the communication in one place.
            </para>
        </section>

        <section id="appliance:release">
            <title>Test and release</title>
            <para>
                The appliance is automatically built in the Univention build
                infrastructure. After the build is finished, automatic tests will
                be started. Build and testing will approximately need four hours.
            </para>
            <para>
                After the automatic tests have finished successfully, the app
                provider is informed. A link to the appliance download is sent
                and a few days are given for testing. If no veto is
                sent, the Appliance is usually published after the veto
                deadline. After the release, the appliance will show up for
                download on the app page in the App Catalog. App Providers are
                recommended to also place a link to the app detail page from
                their download page. The link is one criteria for the
                recommended apps badge in the App Center overview and the App
                Catalog.
            </para>
        </section>
    </section>

    <section id="branding">
        <title>Custom branding</title>
        <para>
            With a customized branding of an appliance the boot loader, the
            boot splash, the system setup wizard and the portal page can be
            modified. Please look at the screenshots below and the explanations
            of the options that control the look.
        </para>

        <section id="appliance:branding:bootloader">
            <title>Boot loader</title>
            <para>
                The background color can be configured for the boot loader.
                Please define in the <guimenu>Primary color</guimenu>
                setting.
            </para>
                <figure id="appliance:branding:bootloader-figure">
                    <title>Boot loader</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_Bootloader.png"/>
                </figure>
        </section>

        <section id="appliance:branding:bootsplash">
            <title>Boot splash</title>
            <para>
                The boot splash can have a custom background and a logo. The
                logo is defined in <guimenu>Logo for the bootsplash during
                    system boot</guimenu>.  Please provide a SVG file and mind
                the recommendations in <xref linkend="logos" />.
            </para>
            <para>
                The background color is defined in <guimenu>CSS definition of
                    the appliance background in bootsplash &amp; welcome
                    screen</guimenu>. For a black background, simply define
                <userinput>#000000</userinput>. A gradient can for example be
                defined with <userinput>linear-gradient(to bottom, #345279 0%,
                    #1d2c41 100%)</userinput>. For more information on how to
                use a gradient, see <ulink
                    url="https://www.w3schools.com/csSref/func_linear-gradient.asp">CSS
                    linear-gradient() function on
                    <wordasword>w3schools</wordasword></ulink>.
            </para>
                <figure id="appliance:branding:bootsplash-figure">
                    <title>Boot splash</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_Bootsplash.png"/>
                </figure>
        </section>

        <section id="appliance:branding:setup-wizard">
            <title>System setup wizard</title>
            <para>
                The system setup wizard allows several slots to be customized.
                In the <guimenu>Configuration</guimenu> section in the App
                Provider Portal, the <guimenu>Appliance name</guimenu> (the
                word "appliance" is automatically appended) can be set. It
                controls the heading in the system setup wizard. The
                <guimenu>Logo for the first page of the setup wizard</guimenu>
                shows up on the first page of the system setup wizard.
            </para>
            <para>
                In the <guimenu>Branding</guimenu> section, the logo on the top
                left can be changed with the <guimenu>Logo for header in setup
                    wizard</guimenu> setting. The <guimenu>Primary
                    color</guimenu> controls the background color of the UMC
                header.
            </para>
            <para>
                The <guimenu>Secondary color</guimenu> is used as color for
                smaller graphical elements throughout the setup wizard (see
                <xref linkend="appliance:branding:umc-branding-figure" />).
            </para>
                <figure id="appliance:branding:setup-wizard-figure">
                    <title>System setup first screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_Setup_Wizard.png"/>
                </figure>
                <figure id="appliance:branding:umc-branding-figure">
                    <title>System setup summary screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_UMC.png"/>
                </figure>
        </section>

        <section id="appliance:branding:welcome-screen">
            <title>Welcome screen</title>
            <para>
                The welcome screen is shown after the appliance setup has been
                finished and also every time the appliance is started. It
                offers information on how the user can access the appliance. It
                uses settings like the Appliance name and the CSS definition of
                the appliance background. The <guimenu>Logo for the welcome
                    screen</guimenu> needs to be a SVG file that is slightly
                wider than high and which has the fonts converted to paths.
                Please mind the recommendations in <xref linkend="logos" />.
            </para>
            <para>
                Depending on the character of the welcome screen background
                (bright or dark), the <guimenu>Font color for welcome
                    screen</guimenu> should be either set to
                <userinput>White</userinput> or <userinput>Black</userinput>.
            </para>
                <figure id="appliance:branding:umc-branding-welcome-screen">
                    <title>Appliance welcome screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_Welcome_Screen.png"/>
                </figure>
        </section>

        <section id="appliance:branding:portal-page">
            <title>Portal page</title>
            <para>
                The branding of the portal page is independent from the other
                sections. The <guimenu>Title for the UCS portal page in the
                    appliance</guimenu> can be defined and it can be configured
                if the font color shall be black or white. The <guimenu>Logo
                    for the portal page</guimenu> controls which logo shall be
                set in the first tile on the portal page. The background can
                either consist of a background image or a background color or a
                background color gradient as described in <xref
                    linkend="appliance:branding:bootsplash" />.
            </para>
                <figure id="appliance:branding:portal-page-figure">
                    <title>Appliance portal page</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations44/Appliance_Branding_Portal_Page.png"/>
                </figure>
        </section>

    </section>

</chapter>

</book>
